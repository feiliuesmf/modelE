C**** ME001M12 E001M12 SOMTQ M_f90 MB399M12   07/00
C****
C**** Second order scheme for momentum advection, with FLTRUV
C****
C**** Snow ages each day independent of temperature
C****
C****   This does not have leads at all
C****
C**** Basic model II (OA,PALMER omitted) .5 box longitude shift
C**** Pressure replaces Sigma above LS1 as the vertical coordinate
C**** Modified for using new MC codes, radiation, 11 veg.types
C**** Quadratic upstream scheme + 4th order scheme, Cor.term=0 at poles
C**** Routines included: MAIN,INPUT,DYNAM,ADV...,FLTRUV,SHAP1D,DAILY,CHT
C**** f90 changes
*****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      USE SOMTQ_COM
      USE GEOM
      USE GHYCOM
     &   , only : ghdata
      USE RANDOM
      USE CLOUDS, only : TTOLD,QTOLD,WM,SVLHX,RHSAV
     *     ,CLDSAV,MSTCNV,CONDSE
      USE SOCPBL, only : uabl,vabl,tabl,qabl,eabl,cm=>cmgs,ch=>chgs,
     *     cq=>cqgs,ipbl
      USE DAGCOM, only : aj,kacc,aij,aijg,tsfrez,tdiurn,keynr,kdiag

      IMPLICIT REAL*8 (A-H,O-Z)

CBUDG COMMON/WORK3/GBUDG(27,80,4),RBUDG(23,80),QMAPS(27,33),
CBUDG*  QTABLE(27,9,3),EHIST(20),KEYDS(42)
            COMMON/WORKO/OA(IM,JM,12)

      PARAMETER (XSI1=0.5, XSI2=0.5, XSI3=0.5, XSI4=0.5)
      COMMON/RDATA/ROUGHL(IM,JM)
      CHARACTER CYEAR*4,CMMND*80
      CHARACTER*8 :: LABSSW,OFFSSW = 'XXXXXXXX'
      CHARACTER*80 TITLE_T
      LOGICAL EVENT
C**** STATEMENT FUNCTION CONVERTING HOURS TO INTERNAL TIME UNITS
      INTFX(XTAU)=INT(XTAU*XINT+.5)
C**** STATEMENT FUNCTION EVENT IS TRUE IF TAU IS A MULTIPLE OF XTAU
      EVENT(XTAU)=MOD(ITAU,INTFX(XTAU)).LT.IDTHR

      CALL TIMER (MNOW,MINC,MSUM)
      CALL INPUT
      WRITE (3) OFFSSW
      CLOSE (3)
      MSTART=MNOW-MDYN-MCNDS-MRAD-MSURF-MDIAG-MELSE
C**** INITIALIZE TIME PARAMETERS
      HR24=24.
      HR12=12.
      DTHR=DT/3600.
      IDTHR=INTFX(DTHR)
      I24=INTFX(HR24)
      NSTEP0=.5+TAUI/DTHR
      NSTEP=INT(.5+TAU/DTHR)-NSTEP0
      ITAU=(NSTEP+NSTEP0)*IDTHR
      TAU=DFLOAT(ITAU)/XINT
      IDAY=1+ITAU/I24
      TOFDAY=(ITAU-(IDAY-1)*I24)/XINT
      CALL DAILY0
      CALL TIMER (MNOW,MINC,MELSE)
      PERCNT=100.*MELSE/(MNOW-MSTART+.001)
      WRITE (6,'(A,13X,A,I6,A,F6.2,I6,A5,I27,I7,F7.1,A,F11.2)')
     *  '0CLIMATE MODEL STARTED UP','DAY',IDAY,', HR',TOFDAY,
     *   JDATE,JMONTH,MINC,MELSE,PERCNT,' TAU',TAU

      CALL CALC_AMPK(LM)

         MODD5K=1000
      CALL CHECKT (1)
      RUNON=-1.
      IF (TAU.GE.TAUE) GO TO 630
      RUNON=1.
C****
C**** MAIN LOOP
C****
   98 CONTINUE
            IF (USET.LE.0.) GO TO 100
            IF (.NOT.EVENT(USET)) GO TO 100
C****       ZERO OUT INTEGRATED QUANTITIES EVERY USET HOURS
            DO 99 K=4,12
            DO 99 J=1,JM
            DO 99 I=1,IM
   99       OA(I,J,K)=0.
  100 IF (.NOT.EVENT(TAUT)) GO TO 200
C**** WRITE RESTART INFORMATION ONTO DISK
  120 CALL RFINAL (IRAND)
      REWIND KDISK
      WRITE (KDISK) TAU,JC,CLABEL,RC,KEYNR,U,V,T,P,Q,ODATA,GDATA,
     *  GHDATA,BLDATA,
     *  uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     *  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *  RQT,SRHR,TRHR,FSF,TSFREZ,(AJ(K,1),K=1,KACC),
     *  TDIURN,OA,TAU
      REWIND KDISK
      CALL TIMER (MNOW,MINC,MELSE)
      PERCNT=100.*MELSE/(MNOW-MSTART+1.D-5)
      WRITE (6,'(A,I3,55X,2I7,F7.1,A,F11.2)') ' OUTPUT RECORD WRITTEN ON
     * UNIT',KDISK,MINC,MELSE,PERCNT,' TAU',TAU
      KDISK=3-KDISK
C**** TEST FOR TERMINATION OF RUN
  200 READ (3,END=210) LABSSW
  210 CLOSE (3)
      IF (LABSSW.EQ.LABEL1(1:8)) KSS6=1
C     IF (MBEGIN-MNOW.GT.2880000) KSS6=1
      IF (KSS6.EQ.1) GO TO 800
      IF (TAU.GE.TAUE) GO TO 810
C**** IF TIME TO ZERO OUT DIAGNOSTIC ACCUMULATING ARRAYS, DO SO
C****   (ALWAYS AT THE BEGINNING OF THE RUN ......
         IF (TAU.LE.TAUI) GO TO 260
         IF (.NOT.EVENT(HR24)) GO TO 300
C****   .... AND NORMALLY ALSO AT THE BEGINNING OF EACH MONTH)
         DO 250 K=1,13
         IF (JDAY.EQ.NDZERO(K)) GO TO 260
  250    CONTINUE
         GO TO 290
  260    TAU0=TAU
         IDAY0=IDAY
         TOFDY0=TOFDAY
         JDATE0=JDATE
         JMNTH0=JMONTH
         JYEAR0=JYEAR
         DO 270 I=1,10
  270    IDACC(I)=0
         DO 275 K=1,KACC
  275    AJ(K,1)=0.
         DO 280 J=1,JM
         DO 280 I=1,IM
  280    AIJ(I,J,78)=1000.
C**** INITIALIZE SOME ARRAYS AT THE BEGINNING OF SPECIFIED DAYS
  290    IF (JDAY.NE.32) GO TO 294
         DO 292 J=1+JM/2,JM
         DO 292 I=1,IM
  292    TSFREZ(I,J,1)=JDAY
         DO 293 J=1,JM/2
         DO 293 I=1,IM
  293    TSFREZ(I,J,2)=JDAY
         GO TO 296
  294    IF (JDAY.NE.213) GO TO 296
         DO 295 J=1,JM/2
         DO 295 I=1,IM
  295    TSFREZ(I,J,1)=JDAY
C**** INITIALIZE SOME ARRAYS AT THE BEGINNING OF EACH DAY
  296    DO 297 J=1,JM
         DO 297 I=1,IM
         TDIURN(I,J,1)= 1000.
      TDIURN(I,J,2)=-1000.
         TDIURN(I,J,3)= 1000.
         TDIURN(I,J,4)=-1000.
         TDIURN(I,J,5)=    0.
         TDIURN(I,J,6)=-1000.
      TDIURN(I,J,7)=-1000.
      TDIURN(I,J,8)=-1000.
         PEARTH=FEARTH(I,J)
         IF (PEARTH.GT.0.) GO TO 297
         TSFREZ(I,J,1)=365.
         TSFREZ(I,J,2)=365.
  297    CONTINUE
C****
C**** INTEGRATE DYNAMIC TERMS (DIAGA AND DIAGB ARE CALLED FROM DYNAM)
C****
  300    MODD5D=MOD(NSTEP,NDA5D)
         IF (MODD5D.EQ.0) CALL DIAG5A (2,0)
         IF (MODD5D.EQ.0) CALL DIAG9A (1)
      CALL DYNAM

      CALL CALC_AMPK(LS1-1)

      CALL CHECKT (2)
      CALL TIMER (MNOW,MINC,MDYN)
      PERCNT=100.*MDYN/(MNOW-MSTART)
C     WRITE (6,'(A,I1,3X,A,I6,A,F6.2,I6,A5,2I7,F7.1,21X,A,F11.2)')
C    *  '   DYNAMIC TERMS INTEGRATED, MRCH=',MRCH,'DAY',IDAY,
C    *  ', HR',TOFDAY,JDATE,JMONTH,MINC,MDYN,PERCNT,'TAU',TAU
         IF (MODD5D.EQ.0) CALL DIAG5A (7,NDYN)
         IF (MODD5D.EQ.0) CALL DIAG9A (2)
         IF (EVENT(HR12)) CALL DIAG7A
C****
C**** INTEGRATE SOURCE TERMS
C****
      MODRD=MOD(NSTEP,NRAD)
         MODD5S=MOD(NSTEP,NDA5S)
         IF (MODD5S.EQ.0) IDACC(8)=IDACC(8)+1
         IF (MODD5S.EQ.0.AND.MODD5D.NE.0) CALL DIAG5A (1,0)
         IF (MODD5S.EQ.0.AND.MODD5D.NE.0) CALL DIAG9A (1)
C**** CONDENSATION, SUPER SATURATION AND MOIST CONVECTION
C     IF (MOD(NSTEP,NCNDS).NE.0) GO TO 400
      CALL MSTCNV
      CALL CONDSE
      CALL CHECKT (3)
C     CALL PRECIP
C     CALL CHECKT (4)
      CALL TIMER (MNOW,MINC,MCNDS)
         IF (MODD5S.EQ.0) CALL DIAG5A (9,NCNDS)
         IF (MODD5S.EQ.0) CALL DIAG9A (3)
C**** RADIATION, SOLAR AND THERMAL
      CALL RADIA
      CALL CHECKT (5)
      CALL TIMER (MNOW,MINC,MRAD)
         IF (MODD5S.EQ.0) CALL DIAG5A (11,NCNDS)
         IF (MODD5S.EQ.0) CALL DIAG9A (4)
C**** SURFACE INTERACTION AND GROUND CALCULATION
  400 CALL PRECIP
      CALL CHECKT (4)
      CALL SURFCE
      CALL CHECKT (6)
      CALL GROUND
         DO 408 J=1,JM
         DO 408 I=1,IM
         DO 406 K=1,4
  406    AIJG(I,J,K)=AIJG(I,J,K)+GHDATA(I,J,K)
         DO 407 K=7,10
  407    AIJG(I,J,K)=AIJG(I,J,K)+GHDATA(I,J,K)
         AIJG(I,J,28)=AIJG(I,J,28)+GHDATA(I,J,28)
         AIJG(I,J,29)=AIJG(I,J,29)+GHDATA(I,J,29)
  408    CONTINUE
      CALL CHECKT (7)
      CALL DRYCNV
      CALL CHECKT (8)
      CALL TIMER (MNOW,MINC,MSURF)
         IF (MODD5S.EQ.0) CALL DIAG9A (5)
C**** STRATOSPHERIC MOMENTUM DRAG
      CALL SDRAG
      CALL CHECKT (9)
      CALL TIMER (MNOW,MINC,MSURF)
         IF (MODD5S.EQ.0) CALL DIAG5A (12,NCNDS)
         IF (MODD5S.EQ.0) CALL DIAG9A (6)
      MSRCE=MCNDS+MRAD+MSURF
      PERCNT=100.*MSRCE/(MNOW-MSTART)
C     WRITE (6,'(A,64X,2I7,F7.1)')
C    *  ' SOURCE TERMS INTEGRATED', MINC,MSRCE,PERCNT
C**** SEA LEVEL PRESSURE FILTER
      IF (MFILTR.LE.0.OR.MOD(NSTEP,NFILTR).NE.0) GO TO 500
         IDACC(10)=IDACC(10)+1
         IF (MODD5S.NE.0) CALL DIAG5A (1,0)
         CALL DIAG9A (1)
      CALL FILTER
      CALL CHECKT (10)
      CALL TIMER (MNOW,MINC,MDYN)
         CALL DIAG5A (14,NFILTR)
         CALL DIAG9A (7)
C****
C**** UPDATE MODEL TIME AND CALL DAILY IF REQUIRED
C****
  500 NSTEP=NSTEP+NDYN
      ITAU=(NSTEP+NSTEP0)*IDTHR
      TAU=DFLOAT(ITAU)/XINT
      IDAY=1+ITAU/I24
      TOFDAY=(ITAU-(IDAY-1)*I24)/XINT
      IF (.NOT.EVENT(HR24)) GO TO 590
         CALL DIAG5A (1,0)
         CALL DIAG9A (1)
      CALL DAILY
      CALL TIMER (MNOW,MINC,MELSE)
         NDAILY=SDAY/DT
         CALL DIAG5A (16,NDAILY)
         CALL DIAG9A (8)
      DO 530 J=1,JM
      IMAX=IMAXJ(J)
      DO 530 I=1,IMAX
C**** INCREASE SNOW AGE EACH DAY (independent of Ts)
      GDATA(I,J,9)=1.+.98*GDATA(I,J,9)
      GDATA(I,J,10)=1.+.98*GDATA(I,J,10)
      GDATA(I,J,11)=1.+.98*GDATA(I,J,11)
         TSAVG=TDIURN(I,J,5)/(HR24*NSURF)
         IF(32.+1.8*TSAVG.LT.65.)AIJ(I,J,52)=AIJ(I,J,52)+(33.-1.8*TSAVG)
         AIJ(I,J,54)=AIJ(I,J,54)+18.*((TDIURN(I,J,2)-TDIURN(I,J,1))
     *     /(TDIURN(I,J,4)-TDIURN(I,J,3)+1.D-20)-1.)
         AIJ(I,J,30)=AIJ(I,J,30)+(TDIURN(I,J,4)-TDIURN(I,J,3))
         AIJ(I,J,80)=AIJ(I,J,80)+(TDIURN(I,J,4)-273.16)
         IF (TDIURN(I,J,6).LT.AIJ(I,J,78)) AIJ(I,J,78)=TDIURN(I,J,6)
  530 CONTINUE
      IF (KOCEAN.EQ.1) THEN
         DO 540 J=1,JM
         DO 540 I=1,IM
         AIJ(I,J,46)=AIJ(I,J,46)+ODATA(I,J,4)
  540    AIJ(I,J,60)=AIJ(I,J,60)+ODATA(I,J,5)
C**** RESTRUCTURE THE OCEAN LAYERS AND ELIMINATE SMALL ICE BERGS
      CALL OSTRUC
      CALL CHECKT (11)
      CALL TIMER (MNOW,MINC,MSURF)
      ENDIF
C****
C**** WRITE INFORMATION ONTO A TAPE EVERY USET HOURS
C****
  590 CONTINUE
      IF (USET.LE.0.) GO TO 600
C****
C****       DATA SAVED IN ORDER TO CALCULATE OCEAN TRANSPORTS
C****
C****       1  ACE1I+SNOWOI  (INSTANTANEOUS AT NOON GMT)
C****       2  TG1OI  (INSTANTANEOUS AT NOON GMT)
C****       3  TG2OI  (INSTANTANEOUS AT NOON GMT)
C****       4  ENRGP  (INTEGRATED OVER THE DAY)
C****       5  SRHDT  (FOR OCEAN, INTEGRATED OVER THE DAY)
C****       6  TRHDT  (FOR OCEAN, INTEGRATED OVER THE DAY)
C****       7  SHDT   (FOR OCEAN, INTEGRATED OVER THE DAY)
C****       8  EVHDT  (FOR OCEAN, INTEGRATED OVER THE DAY)
C****       9  TRHDT  (FOR OCEAN ICE, INTEGRATED OVER THE DAY)
C****      10  SHDT   (FOR OCEAN ICE, INTEGRATED OVER THE DAY)
C****      11  EVHDT  (FOR OCEAN ICE, INTEGRATED OVER THE DAY)
C****      12  SRHDT  (FOR OCEAN ICE, INTEGRATED OVER THE DAY)
C****
            IF (.NOT.EVENT(USET/2.)) GO TO 600
            IF (EVENT(USET)) GO TO 552
C****       SAVE INSTANTANEOUS QUANTITIES
            DO 551 J=1,JM
            DO 551 I=1,IM
            OA(I,J,1)=.1*916.6+GDATA(I,J,1)
            OA(I,J,2)=GDATA(I,J,3)*XSI1+GDATA(I,J,7)*XSI2
  551       OA(I,J,3)=GDATA(I,J,15)*XSI3+GDATA(I,J,16)*XSI4
            GO TO 600
  552       WRITE (20) TAU,OA
            ENDFILE 20
            BACKSPACE 20
         CALL TIMER (MNOW,MINC,MELSE)
         PERCNT=100.*MELSE/(MNOW-MSTART)
         WRITE (6,'(A,78X,A,F11.2)') ' INFORMATION WRITTEN ON UNIT 20',
     *     ' TAU',TAU
C****
C**** CALL DIAGNOSTIC ROUTINES
C****
  600    IF (MOD(NSTEP+NDA4,NDA4).EQ.0) CALL DIAG4A
         IF (USESLP.NE.0.) THEN
         IF (USESLP.LT.0..AND.EVENT(-USESLP)) USESLP=-USESLP
         IF (USESLP.GT.0..AND.EVENT( USESLP)) CALL DIAG10(0)
         ENDIF
         IF (NDPRNT(1).GE.0) GO TO 610
C**** PRINT CURRENT DIAGNOSTICS (INCLUDING THE INITIAL CONDITIONS)
         IF (KDIAG(1).LT.9) CALL DIAGJ
         IF (KDIAG(2).LT.9) CALL DIAGJK
         IF (KDIAG(2).LT.9) CALL DIAGJL
         IF (KDIAG(7).LT.9) CALL DIAG7P
         IF (KDIAG(3).LT.9) CALL DIAGIJ
         IF (KDIAG(9).LT.9) CALL DIAG9P
         IF (KDIAG(5).LT.9) CALL DIAG5P
         IF (KDIAG(4).LT.9) CALL DIAG4
         IF (TAU.LE.TAUI+DTHR*(NDYN+.5)) CALL DIAGKN
         NDPRNT(1)=NDPRNT(1)+1
         IF (TAU.LE.TAUI+DTHR*(NDYN+.5)) GO TO 610
C**** RESET THE UNUSED KEYNUMBERS TO ZERO
         DO 605 I=1,42
  605    KEYNR(I,KEYCT)=0
  610    IF (.NOT.EVENT(HR24)) GO TO 690
C**** PRINT DIAGNOSTIC TIME AVERAGED QUANTITIES ON NDPRNT-TH DAY OF RUN
         DO 620 K=1,13
         IF (JDAY.EQ.NDPRNT(K)) GO TO 630
  620    CONTINUE
         GO TO 640
  630    WRITE (6,'("1"/64(1X/))')
         IF (KDIAG(1).LT.9) CALL DIAGJ
         IF (KDIAG(2).LT.9) CALL DIAGJK
         IF (KDIAG(2).LT.9) CALL DIAGJL
         IF (KDIAG(7).LT.9) CALL DIAG7P
         IF (KDIAG(3).LT.9) CALL DIAGIJ
         IF (KDIAG(9).LT.9) CALL DIAG9P
         IF (KDIAG(5).LT.9) CALL DIAG5P
         IF (KDIAG(6).LT.9) CALL DIAG6
         IF (KDIAG(4).LT.9) CALL DIAG4
C     IF (KDIAG(8).LT.9) CALL DIAG8 (0)
C**** THINGS TO DO BEFORE ZEROING OUT THE ACCUMULATING ARRAYS
C****   (NORMALLY DONE AT THE END OF A MONTH)
  640    DO 650 K=1,13
         IF (JDAY.EQ.NDZERO(K)) GO TO 660
  650    CONTINUE
         GO TO 690
C**** PRINT THE KEY DIAGNOSTICS
  660    CALL DIAGKN
      IF (RUNON.EQ.-1.) STOP 13
         IF (KCOPY.LE.0) GO TO 688
C**** SAVE ONE OR BOTH PARTS OF THE FINAL RESTART DATA SET
         WRITE (CYEAR,'(I4)') JYEAR0
         LLAB1 = INDEX(LABEL1,'(') -1
         IF(LLAB1.LT.1) LLAB1=16
         IF (KCOPY.EQ.1) GO TO 685
C**** KCOPY > 1 : SAVE THE RESTART INFORMATION
         CALL RFINAL (IRAND)
      OPEN(30,FILE=JMNTH0(1:3)//CYEAR//'.rsf'//LABEL1(1:LLAB1),
     *        FORM='UNFORMATTED')
         WRITE (30) TAU,JC,CLABEL,RC,KEYNR,U,V,T,P,Q,ODATA,GDATA,
     *  GHDATA,BLDATA,
     *  uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     *  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *      RQT,SRHR,TRHR,FSF,TSFREZ,TAU
         CLOSE (30)
         IF (KCOPY.EQ.2) GO TO 685
C**** KCOPY > 2 : SAVE THE OCEAN DATA FOR INITIALIZING DEEP OCEAN RUNS
      OPEN (30,FILE=JMNTH0(1:3)//CYEAR//'.oda'//LABEL1(1:LLAB1),
     *         FORM='UNFORMATTED')
         WRITE (30) TAU,ODATA,((AIJ(I,J,60),I=1,IM),J=1,JM)
         CLOSE (30)
C**** SAVE THE DIAGNOSTIC ACCUM ARRAYS IN SINGLE PRECISION
  685    CONTINUE
      OPEN (30,FILE=JMNTH0(1:3)//CYEAR//'.acc'//LABEL1(1:LLAB1),
     *         FORM='UNFORMATTED')
         WRITE (30) SNGL(TAU),JC,CLABEL,(SNGL(RC(I)),I=1,161),KEYNR,
     *     (SNGL(TSFREZ(I,1,1)),I=1,IM*JM*2),
     *     (SNGL(AJ(I,1)),I=1,KACC),SNGL(TAU)
         CLOSE (30)
C**** PRINT AND ZERO OUT THE TIMING NUMBERS
  688 CALL TIMER (MNOW,MINC,MDIAG)
      TOTALT=.01*(MNOW-MSTART)
      PDYN  = MDYN/TOTALT
      PCDNS = MCNDS/TOTALT
      PRAD  = MRAD/TOTALT
      PSURF = MSURF/TOTALT
      PDIAG = MDIAG/TOTALT
      PELSE = MELSE/TOTALT
      DTIME = 24.*TOTALT/(60.*(TAU-TAU0))
      WRITE (6,'(/A,F7.2,A,F5.1,A,F5.1,A,F5.1,A,F5.1,A,F5.1,A,F5.1//)')
     *  '0TIME',DTIME,'(MINUTES)    DYNAMICS',PDYN,
     *  '    CONDENSATION',PCDNS,'    RADIATION',PRAD,'    SURFACE',
     *  PSURF,'    DIAGNOSTICS',PDIAG,'    OTHER',PELSE
      MDYN  = 0
      MCNDS = 0
      MRAD  = 0
      MSURF = 0
      MDIAG = 0
      MELSE = 0
      MSTART= MNOW
C**** TIME FOR CALLING DIAGNOSTICS
  690 CALL TIMER (MNOW,MINC,MDIAG)
      IF (TAU.LE.TAUI+DTHR*(NDYN+.5).AND.TAUT.LT.TAU+1000.) GO TO 120
      GO TO 98
C****
C**** END OF MAIN LOOP
C****
C**** RUN TERMINATED BECAUSE SENSE SWITCH 6 WAS TURNED ON
  800 WRITE (6,'("0SENSE SWITCH 6 HAS BEEN TURNED ON.")')
  810 IF (EVENT(TAUT).OR.TAUT.GE.TAU+1000.) GO TO 820
      CALL RFINAL (IRAND)
      REWIND KDISK
      WRITE (KDISK) TAU,JC,CLABEL,RC,KEYNR,U,V,T,P,Q,ODATA,GDATA,
     *  GHDATA,BLDATA,
     *  uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     *  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *  RQT,SRHR,TRHR,FSF,TSFREZ,(AJ(K,1),K=1,KACC),TDIURN,OA,TAU
      WRITE (6,'(A,I3,77X,A,F11.2)')
     *  ' OUTPUT RECORD WRITTEN ON UNIT',KDISK,'TAU',TAU
C**** RUN TERMINATED BECAUSE IT REACHED TAUE (OR SS6 WAS TURNED ON)
  820 WRITE (6,'(/////4(1X,33("****")/)//,A,F11.2,I6,F7.2
     *             ///4(1X,33("****")/))')
     *  ' PROGRAM TERMINATED NORMALLY.TAU,IDAY,TOFDAY=',TAU,IDAY,TOFDAY
      IF (KSS6.EQ.1) STOP 12
      STOP 13
      END

      BLOCK DATA BDINP
C****
C**** DEFAULT PARAMETERS FOR MODEL COMMON BLOCK
C****
      USE E001M12_COM
     &     , only : im,jm,lm

      IMPLICIT REAL*8 (A-H,O-Z)

      DOUBLE PRECISION :: LHEx,LHMx,LHSx,KAPAx
      INTEGER, DIMENSION(3) :: IDUM
      INTEGER, DIMENSION(13) :: NDZERO,NDPRNT
      INTEGER, DIMENSION(2,4) :: IJD6
      INTEGER, DIMENSION(12) :: IDACC
      COMMON /IPARMB/ IM0,JM0,LM0,JMM1,LMM1,    LS1,LTM,LBLM,LMCM,LSSM,
     *  KOCEAN,KDISK,KEYCT,KACC0,KCOPY,  IRAND,IJRA,MFILTR,NDYN,NCNDS,
     *  NRAD,NSURF,NGRND,NFILTR,NDAA,   NDA5D,NDA5K,NDA5S,NDA4,NDASF,
     *  MLAST,MDYN,MCNDS,MRAD,MSURF,    MDIAG,MELSE,MODRD,MODD5K,MODD5S,
     *  IYEAR,IDAY,IDAY0,JYEAR,JYEAR0,  JDAY,JDATE,JDATE0,NSTEP,MRCH,
     *  KTACC0,IDUM   ,NDZERO    ,NDPRNT    ,  IJD6     ,IDACC

      DOUBLE PRECISION, DIMENSION(2) :: XCDNST
      DOUBLE PRECISION, DIMENSION(36) :: SIG
      DOUBLE PRECISION, DIMENSION(37) :: SIGE
      DOUBLE PRECISION, DIMENSION(4) :: TAUTR0
      DOUBLE PRECISION, DIMENSION(40) :: RDM2
       COMMON /RPARMB/
     *  TAU,TAU0,TOFDAY,TOFDY0,DT,      TAUP,TAUI,TAUE,TAUT,TAUO,
     *  TWOPIx,SDAYx,LHEx,LHMx,LHSx, RADIUSx,GRAVx,RGASx,KAPAx,OMEGAx,
     *  CCMCX,U00,S0X,CO2,SRCOR,        PTOP,PSF,PSDRAG,PTRUNC,AREAGx,
     *  XCDNST   ,XINT,DLATx,DLONx,       SKIPSE,USESLP,USEP,USET,FIM,
     *  RSDIST,SIND,COSD,DOPK,     SIG    ,SIGE    ,TAUTR0   ,RDM2


      CHARACTER*4 XLABEL,NAMD6,JMONTH,JMNTH0
      COMMON /TEXT/ XLABEL(33),NAMD6(4),JMONTH,JMNTH0

      DATA IM0,JM0,LM0,  LS1,LBLM/
     *     IM ,JM ,LM ,   12,   5/,
     *  KOCEAN,KDISK,KEYCT,KCOPY,     IRAND,IJRA,MFILTR,NDYN/
     *       1,    1,    1,    2, 123456789,   2,     1,   8/,
     *       NSURF,NGRND,  IYEAR/
     *           2,    1,   1976/,
     *  MLAST,MDYN,MCNDS,MRAD,MSURF,  MDIAG,MELSE,MODRD,MODD5K,MODD5S/
     *      0,   0,    0,   0,    0,      0,    0,    0,     0,     0/
      DATA  DT,  TAUP,TAUI,TAUE,TAUT/
     *    450.,   -1., -1.,  1., 24./,
     *   SDAYx,  LHEx,   LHMx,  LHSx, RADIUSx,GRAVx,RGASx,KAPAx/
     *  86400.,2500000.,334000.,2834000., 6375000.,9.81,287.,.286/,
     *  CCMCX,U00,S0X,CO2,SRCOR, PTOP, PSF, PSDRAG,PTRUNC/
     *      1.,.7, 1., 1.,   1., 150.,984.,  500.,    0./,
     *  XCDNST(1),XCDNST(2),XINT, SKIPSE,USESLP,USEP,USET, DOPK/
     *      .0005,   .00005,120.,     0.,    0.,  0.,  0.,   0./
C     DATA TWOPI/6.283185/
      DATA TWOPIx/6.283185307179586477D0/
      DATA SIGE /1.0000000,36*0./
      DATA NAMD6 /'AUSD','MWST','SAHL','EPAC'/,
     *  NDZERO/ 0,1,32,60,91,121,152,182,213,244,274,305,335/,
     *  NDPRNT/-1,1,32,60,91,121,152,182,213,244,274,305,335/,
     *  IJD6/63,17, 17,34, 37,27, 13,23/
      END
      SUBROUTINE INPUT
C****
C**** THIS SUBROUTINE SETS THE PARAMETERS IN THE C ARRAY, READS IN THE
C**** INITIAL CONDITIONS, AND CALCULATES THE DISTANCE PROJECTION ARRAYS
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
     *     ,rhow
      USE E001M12_COM
      USE SOMTQ_COM
      USE GEOM
      USE GHYCOM
     &  , only : ghdata
      USE RANDOM
      USE CLOUDS, only : TTOLD,QTOLD,WM,SVLHX,RHSAV,CLDSAV
      USE SOCPBL
     &     , only : uabl,vabl,tabl,qabl,eabl,cm=>cmgs,ch=>chgs,cq=>cqgs
     *     ,ipbl
      USE DAGCOM, only : aj,kacc,tsfrez,tdiurn,kdiag,keynr,jreg
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION JC1(100),CLABEL1(39),RC1(161)
      CHARACTER*4 CLABEL1,RUNID

            COMMON/WORKO/OA(IM,JM,12)
      COMMON/WORK1/NLREC(256),SNOAGE(IM,JM,2)

      LOGICAL :: redoGH = .FALSE.,iniPBL = .FALSE.
      COMMON/RDATA/ROUGHL(IM,JM)

      CHARACTER*8 RECORD(10),NLREC*80,TITREG*80,NAMREG(23)
      COMMON/TNKREG/TITREG,NAMREG,KREG
      REAL*4 TAU4,TAUY4,XX4
      NAMELIST/INPUTZ/IM0,JM0,LM0,LS1,LBLM,LMCM,LSSM,KOCEAN,ISTART,
     *  KDISK,TAUP,TAUI,TAUE,TAUT,TAUO,NDYN,NCNDS,NRAD,NSURF,NGRND,
     *  NFILTR,NDAA,NDA5D,NDA5K,NDA5S,NDA4,NDASF,DT,TAU,XINT,IYEAR,
     *  LHEx,LHMx,LHSx,RADIUSx,GRAVx,RGASx,KAPAx,OMEGAx,
     *     CCMCX,U00,S0X,CO2,SRCOR,
     *     PTOP,PSF,PSL,PTRUNC,DLATx,DLONx,AREAGx,IRAND,IJRA,MFILTR
     *     ,NDIFS,KACC0,KEYCT,SKIPSE,USESLP,USEP,USET,KCOPY,XCDNST,IDACC
     *     ,KDIAG,NDZERO,NDPRNT,IJD6,NAMD6,SIG,SIGE,KTACC0
      ISTART=10
C**** READ SPECIAL REGIONS FROM UNIT 29 - IF AVAILABLE
CC       KREG=0
CC       READ(29,NUM=LEN,END=25) TITREG,(JRG,I=1,IM*JM+2*23+1)
CC 25    IF (LEN.EQ.80+4*IM*JM+8*23) THEN
           REWIND 29
           READ(29) TITREG,JREG,NAMREG
           WRITE(6,*) ' read REGIONS from unit 29: ',TITREG
           KREG=1
CC       END IF
         DO 45 K=1,12
   45    KDIAG(K)=0
C**** INITIALIZE ADVECTION TERMS FOR SECOND ORDER MOMENTS
      DO 47 I=1,IM*JM*LM*9
   47 TX(I,1,1) = 0.
      DO 48 I=1,IM*JM*LM*9
   48 QX(I,1,1) = 0.
      WRITE (6,'(A,40X,A/)') '0','GISS N LAYER WEATHER MODEL'
C**** Read in Label and Namelist parameters from rundeck
      READ(5,'(A80)') NLREC(1),NLREC(2)
      NOFF=0
      IF (NLREC(1)(73:80).EQ.'        ') NOFF=2
      DO 55 I=1,20-NOFF
   55 XLABEL(I)=NLREC(1)((4*I-3):(4*I))
      DO 56 I=1,12+NOFF
   56 XLABEL(20-NOFF+I)=NLREC(2)((4*I-3):(4*I))
      RUNID=XLABEL(1)
      XLABEL(33) = ' '
      WRITE (6,'(A,33A4/)') '0',XLABEL
C**** COPY INPUTZ NAMELIST ONTO CORE TAPE AND TITLE PAGE
      IREC=0
   60 IREC=IREC+1
      READ  (5,'    (A80)') NLREC(IREC)
      WRITE (6,'(35X,A80)') NLREC(IREC)
      IF (NLREC(IREC)(1:5).NE.' &END')  GO TO 60
CSGI  READ (NLREC,INPUTZ)
      REWIND 8
      WRITE(8,'(A)') (NLREC(IR),IR=1,IREC)
      REWIND 8
      READ (8,NML=INPUTZ)
      REWIND 8
      IF (ISTART.GE.10) GO TO 90
C**** SET STRICTLY DEPENDENT QUANTITIES
      JMM1=JM-1
      FIM=IM
      LMM1=LM-1
C**** SET OPTIONALLY DEPENDENT QUANTITIES
      LBLM=1                              ! used in CONDSE
      DO 80 L=1,LM
      IF(SIGE(L).EQ.0.) LS1=L
      IF(SIGE(L+1)*(PSF-PTOP)+PTOP.GT.930.) LBLM=L
   80 SIG(L)=.5*(SIGE(L)+SIGE(L+1))
      LSSM=LM
      LMCM=LS1-1
      TAUO=TAUP
      IF (TAUP.LT.0.) TAUP=TAUI
      NCNDS=NDYN
      NRAD=5*NDYN
      NFILTR=2*NDYN
         NDAA=7*NDYN+2
         NDA5D=7*NDYN
         NDA5K=NDAA
         NDA5S=7*NDYN
         NDA4=24*NDYN
         NDASF=2*NSURF-1
         KACC0=KACC
         KTACC0 = KTACC
   90 GO TO (100,200,300,320,322,325,890,890,890,400,440,440,400),ISTART
      GO TO 400
C****
C**** FUNCTIONAL DETERMINATION OF PROGNOSTIC QUANTITIES, ISTART=1
C****
  100 TEMP=250.
      IF(TAUI.LT.0.) TAUI=0.
      DO 120 J=1,JM
      DO 120 I=1,IM
      P(I,J)=PSF-PTOP
      BLDATA(I,J,2)=TEMP
      DO 120 L=1,LM
      U(I,J,L)=0.
      V(I,J,L)=0.
      T(I,J,L)=TEMP
  120 Q(I,J,L)=3.D-6
      GO TO 210
CALT  DEFINE GDATA(1->14),GHDATA(1->4*NGM+5) AND GO TO 220
C****
C**** INITIALIZE A RUN FROM ATMOSPHERIC CONDITIONS ON UNIT 9 AND
C**** GROUND CONDITIONS (traditional) ON UNIT 7, ISTART=2
C****
  200 CALL READT (9,0,P,IM*JM,P,1)                     ! Psurf
      DO I=1,IM*JM
      P(I,1)=P(I,1)-PTOP                               ! Psurf -> P
      END DO
      DO L=1,LM
      CALL READT (9,0,U(1,1,L),IM*JM,U(1,1,L),1)       ! U
      END DO
      DO L=1,LM
      CALL READT (9,0,V(1,1,L),IM*JM,V(1,1,L),1)       ! V
      END DO
      DO L=1,LM
      CALL READT (9,0,T(1,1,L),IM*JM,T(1,1,L),1)       ! Temperature
      END DO
      DO L=1,LM
      CALL READT (9,0,Q(1,1,L),IM*JM,Q(1,1,L),1)       ! Q
      END DO
      CALL READT (9,0,BLDATA(1,1,2),IM*JM,BLDATA(1,1,2),1)  ! Tsurf
      REWIND 9
C**** new: GDATA(8) UNUSED,GDATA(9-11) SNOW AGE OVER OCN.ICE,L.ICE,EARTH
  210 READ(7,ERR=830) GDATA,GHDATA,(ODATA(I,1,1),I=1,IM*JM*2)
      REWIND 7
C**** Check whether a proper TAUI is given - initialize TAU=model time
  220 IF(TAUI.LT.0.) THEN
         WRITE(6,*) 'PLEASE SET TAUI IN THE RUNDECK'
         STOP 'ERROR: TAUI UNDEFINED'
      END IF
      TAU=TAUI
      TAUX=TAUI
      BLDATA(1,1,1)=SQRT(U(1,2,1)*U(1,2,1)+V(1,2,1)*V(1,2,1))
      BLDATA(1,1,6)=U(1,2,1)
      BLDATA(1,1,7)=V(1,2,1)
      BLDATA(1,JM,1)=SQRT(U(1,JM,1)*U(1,JM,1)+V(1,JM,1)*V(1,JM,1))
      BLDATA(1,JM,6)=U(1,JM,1)
      BLDATA(1,JM,7)=V(1,JM,1)
      DO 225 J=2,JM-1
      IM1=IM
      DO 225 I=1,IM
      BLDATA(I,J,1)=.25*SQRT(
     *   (U(IM1,J,1)+U(I,J,1)+U(IM1,J+1,1)+U(I,J+1,1))**2
     *  +(V(IM1,J,1)+V(I,J,1)+V(IM1,J+1,1)+V(I,J+1,1))**2)
      BLDATA(I,J,6)=.25*(U(IM1,J,1)+U(I,J,1)+U(IM1,J+1,1)+U(I,J+1,1))
      BLDATA(I,J,7)=.25*(V(IM1,J,1)+V(I,J,1)+V(IM1,J+1,1)+V(I,J+1,1))
  225 IM1=I
      CDM=.001
      DO 260 J=1,JM
      DO 260 I=1,IM
C**** SET SURFACE MOMENTUM TRANSFER TAU0
      BLDATA(I,J,8)=CDM*BLDATA(I,J,1)**2
C**** SET LAYER THROUGH WHICH DRY CONVECTION MIXES TO 1
      BLDATA(I,J,4)=1.
C**** SET SURFACE SPECIFIC HUMIDITY FROM FIRST LAYER HUMIDITY
      BLDATA(I,J,3)=Q(I,J,1)
C**** SET RADIATION EQUILIBRIUM TEMPERATURES FROM LAYER LM TEMPERATURE
      DO 230 K=1,3
  230 RQT(I,J,K)=T(I,J,LM)
C**** REPLACE TEMPERATURE BY POTENTIAL TEMPERATURE
      DO 240 L=1,LS1-1
      RHSAV(I,J,L)=.85
      CLDSAV(I,J,L)=0.
      SVLHX(I,J,L)=0.
  240 T(I,J,L)=T(I,J,L)/EXPBYK(SIG(L)*P(I,J)+PTOP)
      DO 242 L=LS1,LM
      RHSAV(I,J,L)=.85
      CLDSAV(I,J,L)=0.
      SVLHX(I,J,L)=0.
  242 T(I,J,L)=T(I,J,L)/((SIG(L)*(PSF-PTOP)+PTOP)**KAPA)
      DO 245 L=1,LM
      TTOLD(I,J,L)=T(I,J,L)
      QTOLD(I,J,L)=Q(I,J,L)
  245 WM(I,J,L)=0.
      IF (LS1.GT.LM) GO TO 260
C**** SET STRATOSPHERIC SPECIFIC HUMIDITY TO 3.D-6
      DO 250 L=LS1,LM
  250 Q(I,J,L)=3.D-6
  260 CONTINUE
C**** INITIALIZE TSFREZ
         DO 280 J=1,JM
         DO 280 I=1,IM
         TSFREZ(I,J,1)=365.
  280    TSFREZ(I,J,2)=365.
      DO 285 ITYPE=1,4
      DO 285 J=1,JM
      DO 285 I=1,IM
  285 BLDATA(I,J,8+ITYPE)=BLDATA(I,J,1)*SQRT(CDM)
CALT  GO TO 327       ! possibility to make tracer slopes more realistic
      GO TO 350
C****
C**** INITIALIZE RUN FROM PREVIOUS MODEL OUTPUT ON UNIT 9, ISTART=3-8
C**** ISTART=3-4  IC-file looks like restart file (same # of prog.var)
C****     ISTART=3: C ARRAY IS BUILT UP FROM DEAULTS AND NAMELIST
  300 READ (9,ERR=800,END=810) TAUX,JC1,CLABEL1,RC1,KEYNR,U,V,T,P,Q,
     2  ODATA,GDATA,GHDATA,BLDATA,
     *   uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     3  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     4  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     5  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     6  RQT
      GO TO 398
C****     ISTART=4: C ARRAY IS COPIED FROM INPUT DATA EXCEPT FOR XLABEL
C**** USE ISTART=4 TO START FROM THIS RUN'S .rsf FILE
C****                                                               ****
C**** Use ISTART=4 for reruns and extensions, NOT to start new runs ****
C***********************************************************************
  320 READ(9,ERR=800)TAUX,JC,CLABEL1,RC,KEYNR,U,V,T,P,Q,ODATA,
     *  GDATA,GHDATA,BLDATA,
     *  uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     2  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *  RQT,SRHR,TRHR,FSF,TSFREZ
      DO 321 K=34,39
  321 CLABEL(K)=CLABEL1(K)
      DO 336 K=32,37
  336 JC(K)=0
      GO TO 399
C**** ISTART=5-9; ICfile looks different from restart file
C**** ISTART=5; initial start from run B140 (snow ages not yet in GDATA)
  322 READ (9,ERR=800,END=810) TAUX,JC1,CLABEL1,RC1,KEYNR,U,V,T,P,Q,
     2  ODATA,GDATA,GHDATA,BLDATA,
     3  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     4  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     5  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     6  RQT,SRHR,TRHR,TSFREZ,SNOAGE
      redoGH=.TRUE.
      GO TO 350
C**** ISTART=6 ; start from run B120 (no QUS, only 1 snow age)
  325 READ(9,ERR=800)TAUX,JC1,CLABEL1,RC1,KEYNR,U,V,T,P,Q,ODATA,
     *  GDATA,GHDATA,BLDATA,
     2  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  RQT,SRHR,TRHR,TSFREZ
      DO 326 J=1,JM
      DO 326 I=1,IM
      SNOAGE(I,J,1)=GDATA(I,J,11)
  326 SNOAGE(I,J,2)=GDATA(I,J,11)
      redoGH=.TRUE.
C**** INITIALIZE VERTICAL SLOPES OF T,Q
  327 DO 340 J=1,JM
      DO 340 I=1,IM
      RDSIG=(SIG(1)-SIGE(2))/(SIG(1)-SIG(2))
      TZ(I,J,1)=(T(I,J,2)-T(I,J,1))*RDSIG
      QZ(I,J,1)=(Q(I,J,2)-Q(I,J,1))*RDSIG
      IF (Q(I,J,1)+QZ(I,J,1).LT.0.) QZ(I,J,1) = -Q(I,J,1)
      DO 330 L=2,LM-1
      RDSIG=(SIG(L)-SIGE(L+1))/(SIG(L-1)-SIG(L+1))
      TZ(I,J,L)=(T(I,J,L+1)-T(I,J,L-1))*RDSIG
      QZ(I,J,L)=(Q(I,J,L+1)-Q(I,J,L-1))*RDSIG
      IF (Q(I,J,L)+QZ(I,J,L).LT.0.) QZ(I,J,L) = -Q(I,J,L)
  330 CONTINUE
      RDSIG=(SIG(LM)-SIGE(LM+1))/(SIG(LM-1)-SIG(LM))
      TZ(I,J,LM)=(T(I,J,LM)-T(I,J,LM-1))*RDSIG
      QZ(I,J,LM)=(Q(I,J,LM)-Q(I,J,LM-1))*RDSIG
      IF (Q(I,J,LM)+QZ(I,J,LM).LT.0.) QZ(I,J,LM) = -Q(I,J,LM)
  340 CONTINUE
  350 CONTINUE
      iniPBL=.TRUE.
C**** Set TAU to TAUI for initial starts
  398 IF (TAUI.LT.0.) TAUI=TAUX
      TAU=TAUI
  399 REWIND 9
      WRITE (6,'(A,I4,F11.2,3X,20A4/)')
     *  '0ATMOSPHERIC I.C. ISTART,TAUX=',ISTART,TAUX,(CLABEL1(K),K=1,20)
C**** Check consistency of TAU and TAUX (from IC)
      IF (MOD(TAUX-TAU,8760.D0).NE.0.) THEN
         WRITE (6,'(A,2F11.2)')
     *     '0 *******  I.C. and TAU are inconsistent', TAUX,TAU
         IF (TAUX.NE.TAUP) STOP 'ERROR: TAU I.C. and TAU inconsistent'
      ENDIF
      GO TO 500
C****
C**** RESTART ON DATA SETS 1 OR 2, ISTART=10-13
C****
C**** CHOOSE DATA SET TO RESTART ON
  400 TAU1=-1.
      READ (1,ERR=410) TAU1
  410 REWIND 1
      TAU2=-1.
      READ (2,ERR=420) TAU2
  420 REWIND 2
      KDISK=1
      IF (TAU1+TAU2.LE.-2.) GO TO 850
      IF (TAU2.GT.TAU1) KDISK=2
      IF (ISTART.GE.13) KDISK=3-KDISK
      GO TO 450
  440 KDISK=ISTART-10
C**** RESTART ON UNIT KDISK
  450 KDISK0=KDISK
  460 READ (KDISK0,ERR=840) TAUX,JC,CLABEL,RC,KEYNR,U,V,T,P,Q,
     2  ODATA,GDATA,GHDATA,BLDATA,
     3  uabl,vabl,tabl,qabl,eabl,cm,ch,cq,ipbl,
     4  TTOLD,QTOLD,SVLHX,RHSAV,WM,CLDSAV,
     *  TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *  QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *  RQT,SRHR,TRHR,FSF,TSFREZ,(AJ(K,1),K=1,KACC),TDIURN,OA,TAUY
      REWIND KDISK0
      KDISK=KDISK0
      IF (RUNID.NE.XLABEL(1)) THEN
         WRITE (6,'(A,A4,A,A4)')
     *     ' THIS RESTART FILE IS FOR RUN',XLABEL(1),' NOT RUN',RUNID
         STOP 'ERROR: WRONG RESTART FILES, MISMATCHED LABELS'
      ENDIF
      IF (TAUX.NE.TAUY) GO TO 860
      WRITE (6,'(A,I2,A,F11.2,A,20A4/)') '0RESTART DISK READ, UNIT',
     *  KDISK,', TAUX=',TAUX,' ',(CLABEL(K),K=1,20)
      IF (ISTART.GT.10) KDISK=3-KDISK
      TAU=TAUX
      TAUP=TAUX
C**** UPDATE C ARRAY FROM INPUTZ
CC500 READ (NLREC,INPUTZ)
  500 REWIND 8
      WRITE(8,'(A)') (NLREC(IR),IR=1,IREC)
      REWIND 8
      READ (8,NML=INPUTZ)
      REWIND 8
      IF (TAU.GT.TAUE) STOP 13
      IF (IM0.LT.IM.OR.JM0.LT.JM.OR.LM0.LT.LM) THEN
      WRITE (6,'('' ARRAY-DIMENSIONS IM,JM,LM '',3I3,
     *  '' ARE INSUFFICIENT FOR IM,JM,LM='',3I3)') IM0,JM0,LM0,IM,JM,LM
      STOP ' ERROR IN GRID SIZE DIMENSIONS '
      END IF
      IF (ISTART.GE.10 .AND. TAU.LT.TAUP) GO TO 900
         IF (USESLP.LE.0.) GO TO 515
C****    REPOSITION THE SEA LEVEL PRESSURE HISTORY DATA SET (UNIT 16)
         REWIND 16
  510    READ (16,ERR=870,END=880) TAU4,((XX4,I=1,IM),J=1,JM),TAUY4
         IF (TAU4.NE.TAUY4) GO TO 860
         IF(TAU.LT.TAU4-.5*USESLP) REWIND 16
         IF (TAU.GE.TAU4+USESLP) GO TO 510
         WRITE (6,'(A,F11.2/)')
     *   '0SLP HISTORY REPOSITIONED.  LAST TAU READ WAS',TAU4
  515    CONTINUE
      IF (USET.LE.0.) GO TO 600
C**** REPOSITION THE OUTPUT TAPE ON UNIT 20 FOR RESTARTING
      REWIND 20
      IF (TAU.LT.TAUO+USET) GO TO 600
  520 READ (20,ERR=870,END=880) TAUX
      IF (TAU.GE.TAUX+USET) GO TO 520
      WRITE (6,'(A,F11.2/)')
     *  '0OUTPUT TAPE REPOSITIONED.  LAST TAU READ WAS',TAUX
C****
C**** CONSTANT ARRAYS TO BE CALCULATED OR READ IN EACH RUN
C****
  600 IF (KEYCT.GT.1) GO TO 610
      DO 605 K=1,2100
  605 KEYNR(K,1)=0
  610 CONTINUE
C**** CALCULATE SPHERICAL GEOMETRY
      CALL GEOM_B
C**** CALCULATE DSIG AND DSIGO
      DO 700 L=1,LM
  700 DSIG(L)=SIGE(L)-SIGE(L+1)
      DO 710 L=1,LM-1
  710 DSIGO(L)=SIG(L)-SIG(L+1)
C*
C***  READ IN LANDMASKS AND TOPOGRAPHIC DATA
C*       Ocean fraction
      CALL READT (26,0,FOCEAN,IM*JM,FOCEAN,1)
C*       Lake fraction
      CALL READT (26,0,FLAKE,IM*JM,FLAKE,1)
C*       Earth fraction (land not incl. land ice)
      CALL READT (26,0,FEARTH,IM*JM,FEARTH,1)
C*       Land ice fraction  
      CALL READT (26,0,FLICE,IM*JM,FLICE,1)
C*       Calculate land fraction (incl. land ice)
      FLAND = FEARTH + FLICE
C*       adjust Land ice fraction to be fraction only over land
c      FLICE = (FLICE/(FLAND+1.D-20))  !!!DONT !!!!
C*       Atmospheric topography
      CALL READT (26,0,ZATMO,IM*JM,ZATMO,1)
C*       adjust to give geopotential height
      ZATMO = ZATMO*GRAV
      REWIND 26
      if(iniPBL) call pblini
C!!!! Added 09/07/95 -rar-
C**** READ IN MAXIMUM MIXED LAYER DEPTHS FOR PREDICTED OCEAN RUNS
      IF(KOCEAN.GT.0) THEN
        CALL READT (14,0,Z12O,IM*JM,Z12O,1)
        REWIND 14
C****   IF GDATA(I,J,1)<0, THE OCEAN PART WAS CHANGED TO LAND ICE
C****   BECAUSE THE OCEAN ICE REACHED THE MAX MIXED LAYER DEPTH
        DO 764 J=1,JM
        DO 764 I=1,IM
        IF(GDATA(I,J,1).GE.-1.) GO TO 764
        FLICE(I,J)=1-FLAND(I,J)+FLICE(I,J)
        FLAND(I,J)=1.
        WRITE(6,'(2I3,'' OCEAN WAS CHANGED TO LAND ICE'')') I,J
  764   CONTINUE
      END IF
C**** READ IN VEGETATION DATA SET: VDATA AND VADATA
      DO 765 K=1,11
  765 CALL READT (23,0,VDATA(1,1,K),IM*JM,VDATA(1,1,K),1)
      REWIND 23
C****
C**** INITIALIZE GROUND HYDROLOGY ARRAYS
C**** Recompute GHDATA if redoGH (new soils data)
C****
      IUNIT=25 ! file containing soil types/parameters
      CALL GHINIT (DT*NDYN/NSURF,UNUSED,IUNIT,redoGH)
      IF (redoGH) THEN
        WRITE (*,*) 'GHDATA WAS MADE FROM GDATA'

C****   Copy Snow age info into GDATA array
        DO 930 J=1,JM
        DO 930 I=1,IM
        GDATA(I,J, 9)=SNOAGE(I,J,1)
        GDATA(I,J,10)=SNOAGE(I,J,2)
  930   CONTINUE
      END IF
      IF(IRAND.LT.0.AND.TAU.EQ.TAUI) THEN
C****   Perturb the Initial Temperatures by at most 1 degree C
        IRAND=-IRAND
        CALL RINIT (IRAND)
        DO 940 L=1,LM
        DO 940 J=1,JM
        DO 940 I=1,IM
        TIJL=T(I,J,L)*EXPBYK(P(I,J)*SIG(L)+PTOP)-1.+2*RANDU(X)
  940   T(I,J,L)=TIJL/EXPBYK(P(I,J)*SIG(L)+PTOP)
        WRITE(6,*) 'Initial conditions were perturbed !!',IRAND
        IRAND=123456789
      END IF
      CALL RINIT (IRAND)
      CALL FFT0 (IM)
C**** MAKE NRAD A MULTIPLE OF NCNDS
      NRAD=(MAX(NRAD,NCNDS)/NCNDS)*NCNDS
      IF (KDIAG(2).EQ.9.AND.SKIPSE.EQ.0..AND.KDIAG(3).LT.9) KDIAG(2)=8
         KACC0=KACC
      WRITE (6,INPUTZ)
      RETURN
C****
C**** TERMINATE BECAUSE OF IMPROPER PICK-UP
C****
  800 WRITE (6,'(A,I4)')
     *  '0ERROR ENCOUNTERED READING I.C. ON UNIT 9.  ISTART=', ISTART
      STOP 'READ ERROR FOR I.C. ON UNIT 9'
  810 WRITE (6,'(A,2F11.2)')
     *  '0EOF ON UNIT 9.  LATER I.C. NEEDED. TAUP,TAUX=', TAUP,TAUX
      STOP 'ERROR: ALL TAUS<TAUP ON I.C. FILE ON UNIT 9'
  830 WRITE(6,*) 'READ ERROR ON UNIT 7: GDATA,GHDATA'
      STOP 'READ ERROR ON UNIT 7'
  840 IF (3-KDISK.EQ.KLAST) GO TO 850
      REWIND KDISK
      KLAST=KDISK
      KDISK=3-KDISK
      WRITE (6,'(A,I3/,A,I1)')
     *  '0ERROR ENCOUNTERED READING RESTART TAPE ON UNIT',KLAST,
     *  '  TRY TO RESTART THE JOB WITH ISTART=3,KDISK=',KDISK
      GO TO 450
  850 WRITE (6,'(A)')
     *  '0ERRORS ON BOTH RESTART DATA SETS. TERMINATE THIS JOB'
      STOP 'ERRORS ON BOTH RESTART FILES'
  860 WRITE (6,'(A,2F11.2/,A)')
     *  '0TAUX,TAUY=',TAUX,TAUY,'0DISK RESTART FILE DESTROYED'
  861 KDISK0=3-KDISK0
      IF (ISTART.EQ.57) GO TO 850
      ISTART=57
      GO TO 460
  870 WRITE (6,'(A,2F11.2)') '0ERROR ENCOUNTERED REPOSITIONING UNIT 16 O
     *R 20.    TAUX,TAU=', TAUX,TAU
      IF (ISTART.GE.10) GO TO 861
      STOP 'READ ERROR ON OUTPUT FILE ON UNIT 16 OR 20'
  880 WRITE (6,'(A,2F11.2)') '0EOF ON UNIT 16 OR 20 WHILE REPOSITIONING.
     *  TAUX,TAU=', TAUX,TAU
      IF (ISTART.GE.10) GO TO 861
      STOP 'POSITIONING ERROR: EOF REACHED ON UNIT 16 OR 20'
  890 WRITE (6,'(A,I5)') '0INCORRECT VALUE OF ISTART',ISTART
      STOP 'ERROR: ISTART-SPECIFICATION INVALID'
  900 WRITE (6,'(A,F11.2,A,F11.2,A)')
     *  '0PREVIOUS TAUE=',TAUP,' WAS NOT YET REACHED. TAU=',TAU,
     *  ' RESUBMIT JOB WITH AN EARLIER TAUE CARD'
      STOP 'ERROR: TAUE TOO LARGE, SINCE TAU<TAUP'
      END
      SUBROUTINE DYNAM
C****
C**** INTEGRATE DYNAMIC TERMS
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      USE SOMTQ_COM
      USE GEOM
      USE CLOUDS, only : PTOLD,WM
      USE DAGCOM, only : aij
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/WORK6/UT(IM,JM,LM),VT(IM,JM,LM),
     *   TT(IM,JM,LM),TZT(IM,JM,LM),WMT(IM,JM,LM),PRAT(IM,JM)
      COMMON/WORK2/UX(IM,JM,LM),VX(IM,JM,LM)
      DIMENSION PA(IM,JM),PB(IM,JM),PC(IM,JM),FPEU(IM,JM),FPEV(IM,JM),
     *          FWVU(IM,JM),FWVV(IM,JM)

      COMMON/WORK1/PIT(IM,JM),SD(IM,JM,LM-1),PU(IM,JM,LM),PV(IM,JM,LM)
      COMMON/WORK3/PHI(IM,JM,LM)

      NDYNO=MOD(NDYN,2)
      DTFS=DT*2./3.
      DTLF=2.*DT
      DO J=1,JM
         DO I=1,IM
            PTOLD(I,J)=P(I,J)
         ENDDO
      ENDDO
      DO L=1,LM
         DO J=1,JM
            DO I=1,IM
               UX(I,J,L)=U(I,J,L)
               UT(I,J,L)=U(I,J,L)
               VX(I,J,L)=V(I,J,L)
               VT(I,J,L)=V(I,J,L)
               WMT(I,J,L)=WM(I,J,L)
            ENDDO
         ENDDO
      ENDDO
      DO 311 J=1,JM
      DO 311 I=1,IM
      PA(I,J)=P(I,J)
      PB(I,J)=P(I,J)
  311 PC(I,J)=P(I,J)
C**** INITIAL FORWARD STEP, QX = Q + .667*DT*F(Q)
      NS=0
      MRCH=0
C     CALL DYNAM (UX,VX,TX,PX,Q,U,V,T,P,Q,DTFS)
      CALL AFLUX (U,V,P)
      CALL ADVECM (P,PB,DTFS)
      CALL ADVECV (P,UX,VX,PB,U,V,P,DTFS)
      CALL PGF (UX,VX,PB,U,V,T,TZ,P,DTFS)
      CALL FLTRUV(UX,VX)
      IF (NDYNO.EQ.1) GO TO 320
C**** INITIAL BACKWARD STEP IS ODD, QT = Q + DT*F(QX)
      MRCH=-1
C     CALL DYNAM (UT,VT,TT,PT,QT,UX,VX,TX,PX,Q,DT)
      CALL AFLUX (UX,VX,PB)
      CALL ADVECM (P,PA,DT)
      CALL ADVECV (P,UT,VT,PA,UX,VX,PB,DT)
      CALL PGF (UT,VT,PA,UX,VX,T,TZ,PB,DT)
      CALL FLTRUV(UT,VT)
      GO TO 360
C**** INITIAL BACKWARD STEP IS EVEN, Q = Q + DT*F(QX)
  320 NS=1
         MODD5K=MOD(NSTEP+NS-NDYN+NDA5K,NDA5K)
      MRCH=1
C     CALL DYNAM (U,V,T,P,Q,UX,VX,TX,PX,QT,DT)
CD       DIAGA SHOULD BE CALLED HERE BUT THEN ARRAYS MUST BE CHANGED
C**** ODD LEAP FROG STEP, QT = QT + 2*DT*F(Q)
  340 MRCH=-2
C     CALL DYNAM (UT,VT,TT,PT,QT,U,V,T,P,Q,DTLF)
      CALL AFLUX (U,V,P)
      CALL ADVECM (PA,PB,DTLF)
      CALL ADVECV (PA,UT,VT,PB,U,V,P,DTLF)
      CALL PGF (UT,VT,PB,U,V,T,TZ,P,DTLF)
      CALL FLTRUV(UT,VT)
C**** LOAD PB TO PA
      DO 341 J=1,JM
      DO 341 I=1,IM
  341 PA(I,J)=PB(I,J)
C**** EVEN LEAP FROG STEP, Q = Q + 2*DT*F(QT)
  360 NS=NS+2
         MODD5K=MOD(NSTEP+NS-NDYN+NDA5K,NDA5K)
      MRCH=2
C     CALL DYNAM (U,V,T,P,Q,UT,VT,TT,PT,QT,DTLF)
      CALL AFLUX (UT,VT,PA)
      CALL ADVECM (PC,P,DTLF)
      CALL ADVECV (PC,U,V,P,UT,VT,PA,DTLF)
C     DO 352 L=1,LM
      DO 352 J=1,JM
      DO 352 I=1,IM
      FPEU(I,J)=0.
      FPEV(I,J)=0.
      FWVU(I,J)=0.
      FWVV(I,J)=0.
      DO 352 L=1,LM
      TT(I,J,L)=T(I,J,L)
  352 TZT(I,J,L)=TZ(I,J,L)
      CALL AADVT (PC,P,T,TX,TY,TZ,TXX,TYY,TZZ,TXY,TZX,TYZ,
     *            DXYP,DSIG,PSF-PTOP,LS1,DTLF,.FALSE.,FPEU,FPEV)
      CALL AADVT (PC,P,Q,QX,QY,QZ,QXX,QYY,QZZ,QXY,QZX,QYZ,
     *            DXYP,DSIG,PSF-PTOP,LS1,DTLF,.TRUE.,FWVU,FWVV)
      DO 354 J=1,JM
      DO 354 I=1,IM
      PC(I,J)=0.5*(P(I,J)+PC(I,J))
      AIJ(I,J,88) = AIJ(I,J,88)+FPEU(I,J)
      AIJ(I,J,89) = AIJ(I,J,89)+FPEV(I,J)
      AIJ(I,J,92) = AIJ(I,J,92)+FWVU(I,J)
      AIJ(I,J,93) = AIJ(I,J,93)+FWVV(I,J)
      DO 354 L=1,LM
      TT(I,J,L)=0.5*(T(I,J,L)+TT(I,J,L))
  354 TZT(I,J,L)=0.5*(TZ(I,J,L)+TZT(I,J,L))
      DO 363 L=1,LM
      DO 361 J=2,JM
      DO 361 I=1,IM
      AIJ(I,J,91)=AIJ(I,J,91)+PV(I,J,L)*DTLF
  361 CONTINUE
      DO 362 I=1,IM
      AIJ(I,1,90)=AIJ(I,1,90)+PU(I,1,L)*DTLF/3.
      AIJ(I,JM,90)=AIJ(I,JM,90)+PU(I,JM,L)*DTLF/3.
      DO 362 J=2,JM-1
      AIJ(I,J,90)=AIJ(I,J,90)+PU(I,J,L)*DTLF
  362 CONTINUE
  363 CONTINUE
      CALL PGF (U,V,P,UT,VT,TT,TZT,PC,DTLF)
      DO 366 L=1,LM
      AIJ(I,1,94)=AIJ(I,1,94)+.5*PHI(1,1,L)+U(I,1,L)*DYP(1)*DTLF
      AIJ(I,JM,94)=AIJ(I,JM,94)+.5*PHI(1,JM,L)+U(I,JM,L)*DYP(JM)*DTLF
      I=IM
      DO 366 IP1=1,IM
      DO 366 J=2,JM-1
      PP=.5*(PHI(I,J,L)+PHI(IP1,J,L))
      UU=.5*(U(I,J,L)+U(I,J+1,L))
      AIJ(I,J,94)=AIJ(I,J,94)+PP*UU*DYP(J)*DTLF
      I=IP1
  366 CONTINUE
      DO 367 L=1,LM
      DO 367 J=2,JM
      IM1=IM
      DO 367 I=1,IM
      PP=.5*(PHI(I,J-1,L)+PHI(I,J,L))
      VV=.5*(V(I,J,L)+V(IM1,J,L))
      AIJ(I,J,95)=AIJ(I,J,95)+PP*VV*DXV(J)*DTLF
      IM1=I
  367 CONTINUE
      CALL FLTRUV(U,V)
C**** LOAD P TO PC
      DO 371 J=1,JM
      DO 371 I=1,IM
  371 PC(I,J)=P(I,J)
         IF (MOD(NSTEP+NS-NDYN+NDAA,NDAA).LT.MRCH) THEN
           CALL DIAGA (UT,VT,TT,PB,Q)
           CALL DIAGB (UT,VT,TT,PB,Q,WMT)
         ENDIF
      IF (NS.LT.NDYN) GO TO 340
C**** Scale WM mixing ratios to conserve liquid water
      DO J=1,JM
        DO I=1,IM
          PRAT(I,J)=PTOLD(I,J)/P(I,J)
        END DO
      END DO
      DO L=1,LS1-1
        DO J=1,JM
          DO I=1,IM
           WM(I,J,L)=WM(I,J,L)*PRAT(I,J)
          END DO
        END DO
      END DO
      RETURN
      END
      SUBROUTINE AFLUX (U,V,PA)
C****
C**** THIS SUBROUTINE CALCULATES THE HORIZONTAL AIR MASS FLUXES
C**** AND VERTICAL AIR MASS FLUXES AS DETERMINED BY U, V AND P.
C**** CONSTANT PRESSURE AT L=LS1 AND ABOVE, PU,PV CONTAIN DSIG
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
     &     , only : im,jm,lm,psf,ptop,ls1,dsig,fim
      USE GEOM
      USE CLOUDS, only : SD_CLOUDS  ! tmp fix for CLOUDS module
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION U(IM,JM,LM),V(IM,JM,LM),P(IM,JM) ! p is just workspace
      COMMON/WORK1/PIT(IM,JM),SD(IM,JM,LM-1),PU(IM,JM,LM),PV(IM,JM,LM)
      COMMON/WORK3/PHI(IM,JM,LM),SPA(IM,JM,LM)
      COMMON/WORK4/FD(IM,JM),FLUXQ(IM),DUMMYS(IM),DUMMYN(IM)
      DIMENSION CONV(IM,JM,LM),PA(IM,JM)
      EQUIVALENCE (CONV,PIT)

C****
C**** BEGINNING OF LAYER LOOP
C****
      L=LM
      DO 70 J=1,JM
      DO 70 I=1,IM
   70 P(I,J)=PSF-PTOP
C****
 2150 IF(L.EQ.LS1-1) THEN
      DO 80 J=1,JM
      DO 80 I=1,IM
   80 P(I,J)=PA(I,J)
      ENDIF
C****
C**** COMPUTATION OF MASS FLUXES     P,T  PU     PRIMARY GRID ROW
C**** ARAKAWA'S SCHEME B             PV   U,V    SECONDARY GRID ROW
C****
C**** COMPUTE PU, THE WEST-EAST MASS FLUX, AT NON-POLAR POINTS
      DO 2154 J=2,JM-1
      DO 2154 I=1,IM
 2154 SPA(I,J,L)=U(I,J,L)+U(I,J+1,L)
      CALL AVRX (SPA(1,1,L))
      I=IM
      DO 2166 IP1=1,IM
      DO 2165 J=2,JM-1
 2165 PU(I,J,L)=.25*DYP(J)*SPA(I,J,L)*(P(I,J)+P(IP1,J))*DSIG(L)
 2166 I=IP1
C**** COMPUTE PV, THE SOUTH-NORTH MASS FLUX
      IM1=IM
      DO 2172 I=1,IM
      DO 2170 J=2,JM
 2170 PV(I,J,L)=.25*DXV(J)*(V(I,J,L)+V(IM1,J,L))*
     *   (P(I,J)+P(I,J-1))*DSIG(L)
 2172 IM1=I
C**** COMPUTE PU*3 AT THE POLES
      PUS=0.
      PUN=0.
      PVS=0.
      PVN=0.
      DO 1110 I=1,IM
      PUS=PUS+U(I,2,L)
      PUN=PUN+U(I,JM,L)
      PVS=PVS+PV(I,2,L)
 1110 PVN=PVN+PV(I,JM,L)
      PUS=.25*DYP(2)*PUS*P(1,1)/FIM
      PUN=.25*DYP(JM-1)*PUN*P(1,JM)/FIM
      PVS=PVS/FIM
      PVN=PVN/FIM
      DUMMYS(1)=0.
      DUMMYN(1)=0.
      DO 1120 I=2,IM
      DUMMYS(I)=DUMMYS(I-1)+(PV(I,2,L)-PVS)/DSIG(L)
 1120 DUMMYN(I)=DUMMYN(I-1)+(PV(I,JM,L)-PVN)/DSIG(L)
      PBS=0.
      PBN=0.
      DO 1130 I=1,IM
      PBS=PBS+DUMMYS(I)
 1130 PBN=PBN+DUMMYN(I)
      PBS=PBS/FIM
      PBN=PBN/FIM
      DO 1140 I=1,IM
      SPA(I,1,L)=4.*(PBS-DUMMYS(I)+PUS)/(DYP(2)*P(1,1))
      SPA(I,JM,L)=4.*(DUMMYN(I)-PBN+PUN)/(DYP(JM-1)*P(1,JM))
      PU(I,1,L)=3.*(PBS-DUMMYS(I)+PUS)*DSIG(L)
 1140 PU(I,JM,L)=3.*(DUMMYN(I)-PBN+PUN)*DSIG(L)
C****
C**** CONTINUITY EQUATION
C****
C**** COMPUTE CONV, THE HORIZONTAL MASS CONVERGENCE
      DO 1510 J=2,JM-1
      IM1=IM
      DO 1510 I=1,IM
      CONV(I,J,L)=(PU(IM1,J,L)-PU(I,J,L)+PV(I,J,L)-PV(I,J+1,L))
 1510 IM1=I
      CONV(1,1,L)=-PVS
      CONV(1,JM,L)=PVN
      L=L-1
      IF (L.GE.1) GO TO 2150
C****
C**** END OF HORIZONTAL ADVECTION LAYER LOOP
C****
C**** COMPUTE PIT, THE PRESSURE TENDENCY
C     PIT(I,J)=CONV(I,J,1)
      DO 2420 L=LM,2,-1
      PIT(1,1)=PIT(1,1)+CONV(1,1,L)
      PIT(1,JM)=PIT(1,JM)+CONV(1,JM,L)
      DO 2420 J=2,JM-1
      DO 2420 I=1,IM
 2420 PIT(I,J)=PIT(I,J)+CONV(I,J,L)
C**** COMPUTE SD, SIGMA DOT
      SD(1, 1,LM-1)=CONV(1, 1,LM)
      SD(1,JM,LM-1)=CONV(1,JM,LM)
      DO 2430 J=2,JM-1
      DO 2430 I=1,IM
 2430 SD(I,J,LM-1)=CONV(I,J,LM)
      DO 2435 L=LM-2,LS1-1,-1
      SD(1, 1,L)=SD(1, 1,L+1)+CONV(1, 1,L+1)
      SD(1,JM,L)=SD(1,JM,L+1)+CONV(1,JM,L+1)
      DO 2435 J=2,JM-1
      DO 2435 I=1,IM
      SD(I, J,L)=SD(I, J,L+1)+CONV(I, J,L+1)
 2435 CONTINUE
      DO 2440 L=LS1-2,1,-1
      SD(1, 1,L)=SD(1, 1,L+1)+CONV(1, 1,L+1)-DSIG(L+1)*PIT(1, 1)
      SD(1,JM,L)=SD(1,JM,L+1)+CONV(1,JM,L+1)-DSIG(L+1)*PIT(1,JM)
      DO 2440 J=2,JM-1
      DO 2440 I=1,IM
      SD(I, J,L)=SD(I, J,L+1)+CONV(I, J,L+1)-DSIG(L+1)*PIT(I, J)
 2440 CONTINUE
      DO 2450 L=1,LM-1
      SDSP=SD(1,1,L)
      SDNP=SD(1,JM,L)
      DO 2450 I=1,IM
      SD(I,1,L)=SDSP
 2450 SD(I,JM,L)=SDNP
C**** temporary fix for CLOUDS module
      SD_CLOUDS(:,:,1)    = PIT
      SD_CLOUDS(:,:,2:LM) = SD(:,:,1:LM-1)
C****
      RETURN
      END
      SUBROUTINE ADVECM (P,PA,DT1)
C****
C**** THIS SUBROUTINE CALCULATES UPDATED COLUMN PRESSURES AS
C**** DETERMINED BY DT1 AND THE CURRENT AIR MASS FLUXES.
C****
      USE E001M12_COM
     &     , only : im,jm,lm,ptrunc,mrch,zatmo,fland,flice,odata,gdata,u
     *     ,v,t,q
      USE GEOM
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION P(IM,JM)
      COMMON/WORK1/PIT(IM,JM),SD(IM,JM,LM-1)
      COMMON/WORK4/FD(IM,JM)
      DIMENSION PA(IM,JM)

C**** COMPUTE PA, THE NEW SURFACE PRESSURE
      PA(1,1)=P(1,1)+(DT1*PIT(1,1)/DXYP(1)+PTRUNC)
         IF (PA(1,1).GT.1150.) WRITE(6,991) 1,1,MRCH,P(1,1),PA(1,1),
     *     ZATMO(1,1),FLAND(1,1),FLICE(1,1),(ODATA(1,1,K),K=1,5)
     *     ,(GDATA(1,1,K),K=1,16),(T(1,1,L),Q(1,1,L),L=1,LM)
      PA(1,JM)=P(1,JM)+(DT1*PIT(1,JM)/DXYP(JM)+PTRUNC)
         IF (PA(1,JM).GT.1150.) WRITE(6,991) 1,JM,MRCH,P(1,JM),PA(1,JM),
     *     ZATMO(1,1),FLAND(1,1),FLICE(1,1),(ODATA(1,1,K),K=1,5)
     *     ,(GDATA(1,1,K),K=1,16),(T(1,1,L),Q(1,1,L),L=1,LM)
      DO 2424 I=2,IM
      PA(I,1)=PA(1,1)
 2424 PA(I,JM)=PA(1,JM)
      DO 2426 J=2,JM-1
      DO 2426 I=1,IM
      PA(I,J)=P(I,J)+(DT1*PIT(I,J)/DXYP(J)+PTRUNC)
         IF (PA(I,J).GT.1150.) WRITE (6,990) I,J,MRCH,P(I,J),PA(I,J),
     *     ZATMO(1,1),FLAND(1,1),FLICE(1,1),(ODATA(1,1,K),K=1,5)
     *     ,(GDATA(1,1,K),K=1,16),(U(I-1,J,L),U(I,J,L),U(I-1,J+1,L),
     *     U(I,J+1,L),V(I-1,J,L),V(I,J,L),V(I-1,J+1,L),V(I,J+1,L),
     *     T(I,J,L),Q(I,J,L),L=1,LM)
 2426 CONTINUE
C****
      RETURN
  990 FORMAT (/'0PRESSURE DIAGNOSTIC     I,J,MRCH,P,PA=',3I4,2F10.2/
     *  '     DATA=',11F10.3/10X,11F10.3/
     *  '0    U(I-1,J)     U(I,J)   U(I-1,J+1)    U(I,J+1)    V(I-1,J)',
     *   '     V(I,J)   V(I-1,J+1)    V(I,J+1)     T(I,J)     Q(I,J)'/
     *  (1X,9F12.3,F12.6))
  991 FORMAT (/'0PRESSURE DIAGNOSTIC     I,J,MRCH,P,PA=',3I4,2F10.2/
     *  '     DATA=',11F10.3/10X,11F10.3/
     *  '0     T(I,J)      Q(I,J)'/(F13.3,F12.6))
      END
      SUBROUTINE ADVECV (PA,UT,VT,PB,U,V,P,DT1)
C****
C**** THIS SUBROUTINE ADVECTS MOMENTUM (INCLUDING THE CORIOLIS FORCE)
C**** AS DETERMINED BY DT1 AND THE CURRENT AIR MASS FLUXES
C****
      USE E001M12_COM
     &     , only : im,jm,lm,mrch,modd5k,psf,ptop,ls1,
     &              dsig,lmm1
      USE GEOM
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION U(IM,JM,LM),V(IM,JM,LM),P(IM,JM)
      COMMON/WORK1/PIT(IM,JM),SD(IM,JM,LM-1),PU(IM,JM,LM),PV(IM,JM,LM)
      COMMON/WORK3/PHI(IM,JM,LM),SPA(IM,JM,LM)
      COMMON/WORK4/FD(IM,JM)
      COMMON/WORK5/DUT(IM,JM,LM),DVT(IM,JM,LM)
      DIMENSION UT(IM,JM,LM),VT(IM,JM,LM),PA(IM,JM),PB(IM,JM)
      DIMENSION SMASS(JM)
      DATA IFIRST/1/
C****
         IF(MODD5K.LT.MRCH) CALL DIAG5F (U,V)
      IF(IFIRST.NE.1) GO TO 50
      IFIRST=0
      JMM2=JM-2
      IJL2=IM*JM*LM*2
      DO 10 J=2,JM
   10 SMASS(J)=(PSF-PTOP)*DXYV(J)
      PSFMPT=PSF-PTOP
   50 CONTINUE
      DT2=DT1/2.
      DT4=DT1/4.
      DT8=DT1/8.
      DT12=DT1/12.
      DT24=DT1/24.
C****
C**** SCALE UT AND VT WHICH MAY THEN BE PHYSICALLY INTERPRETED AS
C**** MOMENTUM COMPONENTS
C****
      I=IM
      DO 120 J=2,JM
      DO 120 IP1=1,IM
      VMASS=.5*((PA(I,J-1)+PA(IP1,J-1))*DXYN(J-1)
     *  +(PA(I,J)+PA(IP1,J))*DXYS(J))
      DO 110 L=1,LS1-1
      UT(I,J,L)=UT(I,J,L)*VMASS*DSIG(L)
  110 VT(I,J,L)=VT(I,J,L)*VMASS*DSIG(L)
  120 I=IP1
      DO 150 L=LS1,LM
      DO 150 J=2,JM
      VMASS=SMASS(J)*DSIG(L)
      DO 150 I=1,IM
      UT(I,J,L)=UT(I,J,L)*VMASS
  150 VT(I,J,L)=VT(I,J,L)*VMASS
      DO 160 I=1,IJL2
  160 DUT(I,1,1)=0.
C****
C**** BEGINNING OF LAYER LOOP
C****
      DO 300 L=1,LM
C****
C**** HORIZONTAL ADVECTION OF MOMENTUM
C****
      I=IM
      DO 230 IP1=1,IM
C**** CONTRIBUTION FROM THE WEST-EAST MASS FLUX
      DO 210 J=2,JM
      FLUX=DT12*(PU(IP1,J,L)+PU(IP1,J-1,L)+PU(I,J,L)+PU(I,J-1,L))
      FLUXU=FLUX*(U(IP1,J,L)+U(I,J,L))
      DUT(IP1,J,L)=DUT(IP1,J,L)+FLUXU
      DUT(I,J,L)=DUT(I,J,L)-FLUXU
      FLUXV=FLUX*(V(IP1,J,L)+V(I,J,L))
      DVT(IP1,J,L)=DVT(IP1,J,L)+FLUXV
  210 DVT(I,J,L)=DVT(I,J,L)-FLUXV
      DO 220 J=2,JM-1
C**** CONTRIBUTION FROM THE SOUTH-NORTH MASS FLUX
      FLUX=DT12*(PV(I,J,L)+PV(IP1,J,L)+PV(I,J+1,L)+PV(IP1,J+1,L))
      FLUXU=FLUX*(U(I,J,L)+U(I,J+1,L))
      DUT(I,J+1,L)=DUT(I,J+1,L)+FLUXU
      DUT(I,J,L)=DUT(I,J,L)-FLUXU
      FLUXV=FLUX*(V(I,J,L)+V(I,J+1,L))
      DVT(I,J+1,L)=DVT(I,J+1,L)+FLUXV
      DVT(I,J,L)=DVT(I,J,L)-FLUXV
C**** CONTRIBUTION FROM THE SOUTHWEST-NORTHEAST MASS FLUX
      FLUX=DT24*(PU(IP1,J,L)+PU(I,J,L)+PV(IP1,J,L)+PV(IP1,J+1,L))
      FLUXU=FLUX*(U(IP1,J+1,L)+U(I,J,L))
      DUT(IP1,J+1,L)=DUT(IP1,J+1,L)+FLUXU
      DUT(I,J,L)=DUT(I,J,L)-FLUXU
      FLUXV=FLUX*(V(IP1,J+1,L)+V(I,J,L))
      DVT(IP1,J+1,L)=DVT(IP1,J+1,L)+FLUXV
      DVT(I,J,L)=DVT(I,J,L)-FLUXV
C**** CONTRIBUTION FROM THE SOUTHEAST-NORTHWEST MASS FLUX
      FLUX=DT24*(-PU(IP1,J,L)-PU(I,J,L)+PV(IP1,J,L)+PV(IP1,J+1,L))
      FLUXU=FLUX*(U(I,J+1,L)+U(IP1,J,L))
      DUT(I,J+1,L)=DUT(I,J+1,L)+FLUXU
      DUT(IP1,J,L)=DUT(IP1,J,L)-FLUXU
      FLUXV=FLUX*(V(I,J+1,L)+V(IP1,J,L))
      DVT(I,J+1,L)=DVT(I,J+1,L)+FLUXV
  220 DVT(IP1,J,L)=DVT(IP1,J,L)-FLUXV
  230 I=IP1
  300 CONTINUE
C****
C**** VERTICAL ADVECTION OF MOMENTUM
C****
      DO 310 L=1,LMM1
      LP1=L+1
      DO 310 J=2,JM
      I=IM
      DO 310 IP1=1,IM
      SDU=DT2*((SD(I,J-1,L)+SD(IP1,J-1,L))*RAVPN(J-1)+
     *  (SD(I,J,L)+SD(IP1,J,L))*RAVPS(J))
      DUT(I,J,L)  =DUT(I,J,L)  +SDU*(U(I,J,L)+U(I,J,LP1))
      DUT(I,J,LP1)=DUT(I,J,LP1)-SDU*(U(I,J,L)+U(I,J,LP1))
      DVT(I,J,L)  =DVT(I,J,L)  +SDU*(V(I,J,L)+V(I,J,LP1))
      DVT(I,J,LP1)=DVT(I,J,LP1)-SDU*(V(I,J,L)+V(I,J,LP1))
  310 I=IP1
C**** CALL DIAGNOSTICS
         IF(MODD5K.LT.MRCH) CALL DIAG5A (4,MRCH)
         IF(MRCH.GT.0) CALL DIAG9D (1,DT1,U,V)
      DO L=1,LM
         DO J=2,JM
            DO I=1,IM
               UT(I,J,L)=UT(I,J,L)+DUT(I,J,L)
               VT(I,J,L)=VT(I,J,L)+DVT(I,J,L)
               DUT(I,J,L)=0.
               DVT(I,J,L)=0.
            ENDDO
         ENDDO
      ENDDO
C****
C**** CORIOLIS FORCE
C****
      DO 430 L=1,LM
      IM1=IM
      DO 430 I=1,IM
C     FD(I,1)=FCOR(1)*2.-.5*(SPA(IM1,1,L)+SPA(I,1,L))*DXV(2)
C     FD(I,JM)=FCOR(JM)*2.+.5*(SPA(IM1,JM,L)+SPA(I,JM,L))*DXV(JM)
C**** Set the Coriolis term to zero at the Poles:
      FD(I,1)=  -.5*(SPA(IM1,1,L)+SPA(I,1,L))*DXV(2)
      FD(I,JM)=  .5*(SPA(IM1,JM,L)+SPA(I,JM,L))*DXV(JM)
      DO 410 J=2,JM-1
  410 FD(I,J)=FCOR(J)+.25*(SPA(IM1,J,L)+SPA(I,J,L))*(DXV(J)-DXV(J+1))
      DO 420 J=2,JM
      PDT4=DT8*(P(I,J-1)+P(I,J))
      IF(L.GE.LS1) PDT4=DT4*PSFMPT
      ALPH=PDT4*(FD(I,J)+FD(I,J-1))*DSIG(L)
      DUT(I,J,L)=DUT(I,J,L)+ALPH*V(I,J,L)
      DUT(IM1,J,L)=DUT(IM1,J,L)+ALPH*V(IM1,J,L)
      DVT(I,J,L)=DVT(I,J,L)-ALPH*U(I,J,L)
  420 DVT(IM1,J,L)=DVT(IM1,J,L)-ALPH*U(IM1,J,L)
  430 IM1=I
C**** CALL DIAGNOSTICS, ADD CORIOLIS FORCE INCREMENTS TO UT AND VT
         IF(MODD5K.LT.MRCH) CALL DIAG5A (5,MRCH)
         IF(MRCH.GT.0) CALL DIAG9D (2,DT1,U,V)
      DO L=1,LM
         DO J=2,JM
            DO I=1,IM
               UT(I,J,L)=UT(I,J,L)+DUT(I,J,L)
               VT(I,J,L)=VT(I,J,L)+DVT(I,J,L)
               DUT(I,J,L)=0.
               DVT(I,J,L)=0.
            ENDDO
         ENDDO
      ENDDO
C****
C**** UNDO SCALING PERFORMED AT BEGINNING OF ADVECV
C****
      I=IM
      DO 520 J=2,JM
      DO 520 IP1=1,IM
      VMASS=.5*((PB(I,J-1)+PB(IP1,J-1))*DXYN(J-1)
     *  +(PB(I,J)+PB(IP1,J))*DXYS(J))
      DO 510 L=1,LS1-1
      VT(I,J,L)=VT(I,J,L)/(VMASS*DSIG(L))
  510 UT(I,J,L)=UT(I,J,L)/(VMASS*DSIG(L))
  520 I=IP1
      DO 550 L=LS1,LM
      DO 550 J=2,JM
      RVMASS=1./(SMASS(J)*DSIG(L))
      DO 550 I=1,IM
      UT(I,J,L)=UT(I,J,L)*RVMASS
  550 VT(I,J,L)=VT(I,J,L)*RVMASS
      RETURN
      END
      SUBROUTINE PGF (UT,VT,PB,U,V,T,SZ,P,DT1)
C****
C**** THIS SUBROUTINE ADDS TO MOMENTUM THE TENDENCIES DETERMINED BY
C**** THE PRESSURE GRADIENT FORCE
C****
      USE CONSTANT, only : rgas,kapa,sha
      USE E001M12_COM
     &     , only : im,jm,lm,sige,psf,ptop,ls1,zatmo,dsig,sig,
     &              mrch,modd5k
      USE GEOM
      USE CLOUDS, only : GZ
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION U(IM,JM,LM),V(IM,JM,LM),T(IM,JM,LM),P(IM,JM)
      COMMON/WORK1/PIT(IM,JM),SD(IM,JM,LM-1),PU(IM,JM,LM)
     1     ,PV(IM,JM,LM)
      COMMON/WORK3/PHI(IM,JM,LM),SPA(IM,JM,LM)
      COMMON/WORK4/FD(IM,JM),FLUXQ(IM),DUMMYS(IM),DUMMYN(IM)
      COMMON/WORK5/DUT(IM,JM,LM),DVT(IM,JM,LM)

      DIMENSION UT(IM,JM,LM),VT(IM,JM,LM),TT(IM,JM,LM),
     *  PA(IM,JM),PB(IM,JM),QT(IM,JM,LM)

      DIMENSION PKE(LM+1)
      REAL*8 KAPAP1,KAPAP2,SZ(IM,JM,LM)
C****
c      SHA=RGAS/KAPA
      KAPAP1=KAPA+1.
      JMM2=JM-2
      DT4=DT1/4.
      KAPAP2=KAPA+2.
      DO 10 L=1,LM+1
   10 PKE(L)=(SIGE(L)*(PSF-PTOP)+PTOP)**KAPA
      PSFMPT=PSF-PTOP
      PSMPT2=2.*PSFMPT
C****
C**** VERTICAL DIFFERENCING
C****
      DO 100 L=LS1,LM
      DO 100 J=1,JM
      DO 100 I=1,IM
  100 SPA(I,J,L)=0.
      DO 330 J=1,JM
      IMAX=IMAXJ(J)
      DO 330 I=1,IMAX
      PIJ=P(I,J)
      PDN=PIJ+PTOP
      PKDN=EXPBYK(PDN)
      PHIDN=ZATMO(I,J)
C**** LOOP OVER THE LAYERS
      DO 310 L=1,LM
      IF(L.LE.LS1-1) GO TO 290
      PKPDN=PKDN*PDN
      PKPPDN=PKPDN*PDN
      DP=DSIG(L)*PSFMPT
      P0=SIG(L)*PSFMPT+PTOP
      TZBYDP=2.*SZ(I,J,L)/DP
      X=T(I,J,L)+TZBYDP*P0
      PUP=SIGE(L+1)*PSFMPT+PTOP
      PKUP=PKE(L+1)
      PKPUP=PKUP*PUP
      PKPPUP=PKPUP*PUP
      GO TO 300
  290 PKPDN=PKDN*PDN
      PKPPDN=PKPDN*PDN
      DP=DSIG(L)*PIJ
      P0=SIG(L)*PIJ+PTOP
      TZBYDP=2.*SZ(I,J,L)/DP
      X=T(I,J,L)+TZBYDP*P0
      PUP=SIGE(L+1)*PIJ+PTOP
      PKUP=EXPBYK(PUP)
      PKPUP=PKUP*PUP
      PKPPUP=PKPUP*PUP
C**** CALCULATE SPA, MASS WEIGHTED THROUGHOUT THE LAYER
      SPA(I,J,L)=RGAS*((X+TZBYDP*PTOP)*(PKPDN-PKPUP)/KAPAP1
     *  -X*PTOP*(PKDN-PKUP)/KAPA-TZBYDP*(PKPPDN-PKPPUP)/KAPAP2)/DP
C**** CALCULATE PHI, MASS WEIGHTED THROUGHOUT THE LAYER
  300 PHI(I,J,L)=PHIDN+RGAS*(X*PKDN/KAPA-TZBYDP*PKPDN/KAPAP1
     *  -(X*(PKPDN-PKPUP)/KAPA-TZBYDP*(PKPPDN-PKPPUP)/KAPAP2)
     *  /(DP*KAPAP1))
C**** CALULATE PHI AT LAYER TOP (EQUAL TO BOTTOM OF NEXT LAYER)
      PHIDN=PHIDN+RGAS*(X*(PKDN-PKUP)/KAPA-TZBYDP*(PKPDN-PKPUP)/KAPAP1)
      PDN=PUP
  310 PKDN=PKUP
  330 CONTINUE
C**** SET POLAR VALUES FROM THOSE AT I=1
      DO 340 L=1,LM
      DO 340 I=2,IM
      SPA(I,1,L)=SPA(1,1,L)
      SPA(I,JM,L)=SPA(1,JM,L)
      PHI(I,1,L)=PHI(1,1,L)
  340 PHI(I,JM,L)=PHI(1,JM,L)
         DO 3081 L=1,LM
         DO 3081 J=1,JM
         DO 3081 I=1,IM
 3081    GZ(I,J,L)=PHI(I,J,L)
C****
C**** PRESSURE GRADIENT FORCE
C****
C**** NORTH-SOUTH DERIVATIVE AFFECTS THE V-COMPONENT OF MOMENTUM
      IM1=IM
      DO 3236 L=1,LS1-1
      DO 3236 I=1,IM
      DO 3234 J=2,JM
      FLUX=DT4*((P(I,J)+P(I,J-1))*(PHI(I,J,L)-PHI(I,J-1,L))+
     *  (SPA(I,J,L)+SPA(I,J-1,L))*(P(I,J)-P(I,J-1)))*DXV(J)*DSIG(L)
      DVT(I,J,L)=DVT(I,J,L)-FLUX
 3234 DVT(IM1,J,L)=DVT(IM1,J,L)-FLUX
 3236 IM1=I
      DO 3246 L=LS1,LM
      DO 3246 I=1,IM
      DO 3244 J=2,JM
      FLUX=DT4*PSMPT2*(PHI(I,J,L)-PHI(I,J-1,L))*DXV(J)*DSIG(L)
      DVT(I,J,L)=DVT(I,J,L)-FLUX
 3244 DVT(IM1,J,L)=DVT(IM1,J,L)-FLUX
 3246 IM1=I
C**** SMOOTHED EAST-WEST DERIVATIVE AFFECTS THE U-COMPONENT
      DO 3294 L=1,LS1-1
      I=IM
      DO 3293 IP1=1,IM
      PU(I,1,L)=0.
      PU(I,JM,L)=0.
      DO 3280 J=2,JM-1
 3280 PU(I,J,L)=(P(IP1,J)+P(I,J))*(PHI(IP1,J,L)-PHI(I,J,L))+
     *  (SPA(IP1,J,L)+SPA(I,J,L))*(P(IP1,J)-P(I,J))
 3293 I=IP1
      CALL AVRX (PU(1,1,L))
      DO 3294 J=2,JM
      DO 3294 I=1,IM
 3294 DUT(I,J,L)=DUT(I,J,L)-DT4*DYV(J)*(PU(I,J,L)+PU(I,J-1,L))*DSIG(L)
      DO 3314 L=LS1,LM
      I=IM
      DO 3313 IP1=1,IM
      PU(I,1,L)=0.
      PU(I,JM,L)=0.
      DO 3310 J=2,JM-1
 3310 PU(I,J,L)=PSMPT2*(PHI(IP1,J,L)-PHI(I,J,L))
 3313 I=IP1
      CALL AVRX (PU(1,1,L))
      DO 3314 J=2,JM
      DO 3314 I=1,IM
 3314 DUT(I,J,L)=DUT(I,J,L)-DT4*DYV(J)*(PU(I,J,L)+PU(I,J-1,L))*DSIG(L)
 3340 CONTINUE
C**** CALL DIAGNOSTICS
      IF(MRCH.LE.0) GO TO 500
         IF(MODD5K.LT.MRCH) CALL DIAG5A (6,MRCH)
         IF(MODD5K.LT.MRCH) CALL DIAG9D (3,DT1,U,V)
C****
C****
C**** UNDO SCALING PERFORMED AT BEGINNING OF DYNAM
C****
  500 CONTINUE
      DO 3410 J=2,JM-1
      DO 3410 I=1,IM
 3410 FD(I,J)=PB(I,J)*DXYP(J)
      FDSP=PB(1, 1)*DXYP( 1)
      FDNP=PB(1,JM)*DXYP(JM)
      FDSP=FDSP+FDSP
      FDNP=FDNP+FDNP
      DO 3520 I=1,IM
      FD(I, 1)=FDSP
 3520 FD(I,JM)=FDNP
      I=IM
      DO 3540 IP1=1,IM
      DO 3530 J=2,JM
      RFDUX=4./(FD(I,J)+FD(IP1,J)+FD(I,J-1)+FD(IP1,J-1))
      DO 3530 L=1,LM
      IF(L.GE.LS1) THEN
          RFDU=1./(PSFMPT*DXYV(J)*DSIG(L))
      ELSE
          RFDU=RFDUX/DSIG(L)
      ENDIF
      VT(I,J,L)=VT(I,J,L)+DVT(I,J,L)*RFDU
 3530 UT(I,J,L)=UT(I,J,L)+DUT(I,J,L)*RFDU
 3540 I=IP1
      RETURN
      END
      SUBROUTINE AVRX (X)
C****
C**** THIS SUBROUTINE SMOOTHES THE ZONAL MASS FLUX AND GEOPOTENTIAL
C**** GRADIENTS NEAR THE POLES TO HELP AVOID COMPUTATIONAL INSTABILITY.
C**** THIS VERSION OF AVRX DOES SO BY TRUNCATING THE FOURIER SERIES.
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      USE GEOM
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION X(IM,JM),SM(IMH,JM),DRAT(JM),NMIN(JM)
      COMMON/AVRXX/BYSN(IMH),AN(0:IMH),BN(0:IMH)
      DATA IFIRST/1/
      IF (IFIRST.NE.1) GO TO 100
      IFIRST=0
C     CALL FFT0(IM)
      DO 30 N=1,IMH
   30 BYSN(N)=1./SIN(.5*DLON*N)
      DO 50 J=2,JM-1
      DRAT(J) = DXP(J)/DYP(3)
      DO 40 N=IMH,1,-1
      SM(N,J) = BYSN(N)*DRAT(J)
      IF(SM(N,J).GT.1.) THEN
         NMIN(J) = N+1
         GO TO 50
      ENDIF
   40 CONTINUE
   50 CONTINUE
C****
  100 DO 140 J=2,JM-1
      IF (DRAT(J).GT.1) GO TO 140
      CALL FFT (X(1,J),AN,BN)
      DO 130 N=NMIN(J),IMH-1
      AN(N)=SM(N,J)*AN(N)
  130 BN(N)=SM(N,J)*BN(N)
      AN(IMH) = SM(IMH,J)*AN(IMH)
      CALL FFTI(AN,BN,X(1,J))
  140 CONTINUE
      RETURN
      END
      SUBROUTINE FILTER
C****
C**** THIS SUBROUTINE PERFORMS AN 8-TH ORDER SHAPIRO FILTER ON
C**** SELECTED PROGNOSTIC QUANTITIES IN THE ZONAL DIRECTION
C****
C**** MFILTR=1  SMOOTH P USING SEA LEVEL PRESSURE FILTER
C****        2  SMOOTH T USING TROPOSPHERIC STRATIFICATION OF TEMPER
C****        3  SMOOTH P AND T
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      USE SOMTQ_COM
      USE GEOM
      USE CLOUDS, only : WM
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/WORK2/X(IM,JM),XS(IM),Y(IM,JM)
      DIMENSION PSUMO(JM)

      REAL*8 POLD(IM,JM),PRAT(IM,JM)

      IF (MOD(MFILTR,2).NE.1) GO TO 200
C****
C**** SEA LEVEL PRESSURE FILTER ON P
C****
      BBYG=.0065/GRAV
      GBYRB=GRAV/(RGAS*.0065)
      DO 120 J=2,JM-1
         PSUMO(J)=0.
      DO 120 I=1,IM
         PSUMO(J)=PSUMO(J)+P(I,J)
         POLD(I,J)=P(I,J)      ! Save old pressure
      Y(I,J)=(1.+BBYG*ZATMO(I,J)/BLDATA(I,J,2))**GBYRB
  120 X(I,J)=(P(I,J)+PTOP)*Y(I,J)
      CALL SHAP1D (8)
      DO 150 J=2,JM-1
         PSUMN=0.
      DO 140 I=1,IM
      P(I,J)=X(I,J)/Y(I,J)-PTOP+PTRUNC
  140 PSUMN=PSUMN+P(I,J)
         PDIF=(PSUMN-PSUMO(J))/IM
      DO 145 I=1,IM
  145    P(I,J)=P(I,J)-PDIF
  150 CONTINUE
C**** Scale mixing ratios (incl moments) to conserve mass/heat
      DO J=2,JM-1
        DO I=1,IM
          PRAT(I,J)=POLD(I,J)/P(I,J)
        END DO
      END DO
      DO L=1,LS1-1
        DO J=2,JM-1
          DO I=1,IM
              Q(I,J,L)=  Q(I,J,L)*PRAT(I,J)
             QX(I,J,L)= QX(I,J,L)*PRAT(I,J)
             QY(I,J,L)= QY(I,J,L)*PRAT(I,J)
             QZ(I,J,L)= QZ(I,J,L)*PRAT(I,J)
            QXX(I,J,L)=QXX(I,J,L)*PRAT(I,J)
            QXY(I,J,L)=QXY(I,J,L)*PRAT(I,J)
            QYY(I,J,L)=QYY(I,J,L)*PRAT(I,J)
            QYZ(I,J,L)=QYZ(I,J,L)*PRAT(I,J)
            QZZ(I,J,L)=QZZ(I,J,L)*PRAT(I,J)
            QZX(I,J,L)=QZX(I,J,L)*PRAT(I,J)
              T(I,J,L)=  T(I,J,L)*PRAT(I,J)
             TX(I,J,L)= TX(I,J,L)*PRAT(I,J)
             TY(I,J,L)= TY(I,J,L)*PRAT(I,J)
             TZ(I,J,L)= TZ(I,J,L)*PRAT(I,J)
            TXX(I,J,L)=TXX(I,J,L)*PRAT(I,J)
            TXY(I,J,L)=TXY(I,J,L)*PRAT(I,J)
            TYY(I,J,L)=TYY(I,J,L)*PRAT(I,J)
            TYZ(I,J,L)=TYZ(I,J,L)*PRAT(I,J)
            TZZ(I,J,L)=TZZ(I,J,L)*PRAT(I,J)
            TZX(I,J,L)=TZX(I,J,L)*PRAT(I,J)
             WM(I,J,L)= WM(I,J,L)*PRAT(I,J)
          END DO
        END DO
      END DO

      CALL CALC_AMPK(LS1-1)

  200 IF (MFILTR.LT.2) RETURN
C****
C**** TEMPERATURE STRATIFICATION FILTER ON T
C****
      AKAP=KAPA-.205
      DO 260 L=1,LS1-1
      DO 220 J=2,JM-1
      DO 220 I=1,IM
      Y(I,J)=(SIG(L)*P(I,J)+PTOP)**AKAP
  220 X(I,J)=T(I,J,L)*Y(I,J)
      CALL SHAP1D (8)
      DO 240 J=2,JM-1
      DO 240 I=1,IM
  240 T(I,J,L)=X(I,J)/Y(I,J)
  260 CONTINUE
      DO 280 L=LS1,LM
      DO 270 J=2,JM-1
      DO 270 I=1,IM
  270 X(I,J)=T(I,J,L)
      CALL SHAP1D (8)
      DO 280 J=2,JM-1
      DO 280 I=1,IM
  280 T(I,J,L)=X(I,J)
      RETURN
      END
      SUBROUTINE FLTRUV(U,V)
C**********************************************************************
C**** THIS ROUTINE FILTERS THE TWO GRIDLENGTH NOISE FROM THE
C**** VELOCITY FIELDS (U,V) IN BOTH DIMENSIONS WITH A 8TH ORDER SHAPIRO
C**** FILTER. THE EFFECT OF THE FILTER IS THAT OF DISSIPATION AT
C**** THE SMALLEST SCALES.
C**********************************************************************
      USE E001M12_COM
     &     , only : im,jm,lm
      USE GEOM
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION U(IM,JM,LM),V(IM,JM,LM)
      DIMENSION X(IM),Y(0:JM+1),F2D(IM,JM)
      LOGICAL*4 QFILY,QFILX,QFIL2D
      DATA IFIRST/1/
      IF(IFIRST.EQ.1) THEN
         IFIRST = 0
         CALL FFT0(IM)
         QFILY  = .FALSE.
         QFILX  = .TRUE.
         QFIL2D = .FALSE.
         NSHAP  = 8
         ISIGN  = (-1.0)**(NSHAP-1)
         X4TON  = 1./(4.**NSHAP)
      ENDIF
C****
C**** Filtering in east-west direction
C****
      DO 350 L=1,LM
C**** Filter U component of momentum
      IF(QFIL2D) GOTO 250
      DO 240 J=2,JM
      DO 210 I=1,IM
  210 X(I) = U(I,J,L)
      DO 230 N=1,NSHAP
      X1   = X(1)
      XIM1 = X(IM)
      DO 220 I=1,IM-1
      XI   = X(I)
      X(I) = XIM1-XI-XI+X(I+1)
  220 XIM1 = XI
  230 X(IM)= XIM1-X(IM)-X(IM)+X1
      DO 240 I=1,IM
  240 U(I,J,L) = U(I,J,L) + ISIGN*X(I)*X4TON
      GOTO 270
  250 DO 255,J=2,JM-1
      F2D(1,J)=.125*(U(IM,J,L)+U(1,J+1,L)+U(2,J,L)+
     *                  U(1,J-1,L)-4.*U(1,J,L))+
     *      1./16.*(U(IM,J-1,L)+U(IM,J+1,L)+U(2,J+1,L)+
     *              U(2,J-1,L)-4.*U(1,J,L))
      DO 260,I=2,IM-1
      F2D(I,J)=.125*(U(I-1,J,L)+U(I,J+1,L)+U(I+1,J,L)+
     *                  U(I,J-1,L)-4.*U(I,J,L))+
     *      1./16.*(U(I-1,J-1,L)+U(I-1,J+1,L)+U(I+1,J+1,L)+
     *              U(I+1,J-1,L)-4.*U(I,J,L))
  260 CONTINUE
      F2D(IM,J)=.125*(U(IM-1,J,L)+U(IM,J+1,L)+U(1,J,L)+
     *                  U(IM,J-1,L)-4.*U(IM,J,L))+
     *      1./16.*(U(IM-1,J-1,L)+U(IM-1,J+1,L)+U(1,J+1,L)+
     *              U(1,J-1,L)-4.*U(IM,J,L))
  255 CONTINUE
      DO 265,J=2,JM-1
      DO 265,I=1,IM
        U(I,J,L)=U(I,J,L)+F2D(I,J)
  265 CONTINUE
  270 CONTINUE
C**** Filter V component of momentum
      DO 340 J=2,JM
      DO 310 I=1,IM
  310 X(I) = V(I,J,L)
      DO 330 N=1,NSHAP
      X1   = X(1)
      XIM1 = X(IM)
      DO 320 I=1,IM-1
      XI   = X(I)
      X(I) = XIM1-XI-XI+X(I+1)
  320 XIM1 = XI
  330 X(IM)= XIM1-X(IM)-X(IM)+X1
      DO 340 I=1,IM
  340 V(I,J,L) = V(I,J,L) + ISIGN*X(I)*X4TON
  350 CONTINUE
C****
C**** Filtering in north-south direction
C****
      IF(.NOT.QFILY) GOTO 651
  400 Y4TO8 = 1./(4.**NSHAP)
C**** Filter U component of momentum
      DO 650 L=1,LM
      DO 540 I=1,IM
      DO 510 J=1,JM
  510 Y(J) = U(I,J,L)
      DO 530 N=1,NSHAP
         Y(0)    = Y(2)
         Y(JM+1) = Y(JM-1)
         YJM1 = Y(0)
         DO 520 J=1,JM
            YJ   = Y(J)
            Y(J) = YJM1-YJ-YJ+Y(J+1)
  520    YJM1 = YJ
  530 CONTINUE
      DO 540 J=1,JM
  540 U(I,J,L) = U(I,J,L) + ISIGN*Y(J)*Y4TO8
C**** Make U winds at poles to be uniform
      DO 560 J=1,JM,JM-1
      YJ = 0.
      DO 550 I=1,IM
  550 YJ = YJ + U(I,J,L)
      DO 560 I=1,IM
  560 U(I,J,L) = YJ/IM
C**** Filter V component of momentum
      DO 640 I=1,IM
      DO 610 J=1,JM-1
  610 Y(J) = V(I,J,L)
      DO 630 N=1,NSHAP
      YJM1 = Y(1)
      Y(1) = Y(2)-Y(1)
      DO 620 J=2,JM-2
      YJ   = Y(J)
      Y(J) = YJM1-YJ-YJ+Y(J+1)
  620 YJM1 = YJ
  630 Y(JM-1)= YJM1-Y(JM-1)
      DO 640 J=1,JM-1
  640 V(I,J,L) = V(I,J,L) + ISIGN*Y(J)*Y4TO8
  650 CONTINUE
C****
  651 RETURN
      END
      SUBROUTINE SHAP1D (NORDER)
C****
C**** THIS SUBROUTINE SMOOTHES THE ARRAY X IN THE ZONAL DIRECTION
C**** USING AN N-TH ORDER SHAPIRO FILTER.  N MUST BE EVEN.
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 X,XS
      COMMON/WORK2/X(IM,JM),XS(IM)
      RE4TON=1./4.**NORDER
      DO 180 J=2,JM-1
      DO 120 I=1,IM
  120 XS(I)=X(I,J)
      DO 160 N=1,NORDER
      XS1=XS(1)
      XSIM1=XS(IM)
      DO 140 I=1,IM-1
      XSI=XS(I)
      XS(I)=XSIM1-XSI-XSI+XS(I+1)
  140 XSIM1=XSI
  160 XS(IM)=XSIM1-XS(IM)-XS(IM)+XS1
      DO 180 I=1,IM
  180 X(I,J)=X(I,J)-XS(I)*RE4TON
      RETURN
      END
      SUBROUTINE DAILY
C****
C**** THIS SUBROUTINE PERFORMS THOSE FUNCTIONS OF THE PROGRAM WHICH
C**** TAKE PLACE AT THE BEGINNING OF A NEW DAY.
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
     *     ,rhow,rhoi,shi,shw,edpery
      USE E001M12_COM
      USE GEOM
      USE SLE001
     &  , only : cosday=>cost, sinday=>sint
      USE SOCPBL
     &     , only : npbl=>n,uabl,vabl,tabl,qabl,eabl,cm=>cmgs,ch=>chgs,
     *     cq=>cqgs,ipbl

      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/WORK2/Z1OOLD(IM,JM),XO(IM,JM,3),XZO(IM,JM)
      COMMON/OOBS/DM(IM,JM),    AOST(IM,JM),EOST1(IM,JM),EOST0(IM,JM),
     *  BOST(IM,JM),COST(IM,JM),ARSI(IM,JM),ERSI1(IM,JM),ERSI0(IM,JM),
     *  BRSI(IM,JM),CRSI(IM,JM),KRSI(IM,JM)

C****
C**** OOBS AOST     monthly Average Ocean Surface Temperature
C****      BOST     1st order Moment of Ocean Surface Temperature
C****      COST     2nd order Moment of Ocean Surface Temperature
C****      EOST0/1  Ocean Surface Temperature at beginning/end of month
C****
C****      ARSI     monthly Average of Ratio of Sea Ice to Water
C****      BRSI     1st order Moment of Ratio of Sea Ice to Water
C****        or     .5*((ERSI0-limit)**2+(ERSI1-limit)**2)/(ARSI-limit)
C****      CRSI     2nd order Moment of Ratio of Sea Ice to Water
C****      ERSI0/1  Ratio of Sea Ice to Water at beginning/end of month
C****      KRSI     -1: continuous piecewise linear fit at lower limit
C****                0: quadratic fit
C****                1: continuous piecewise linear fit at upper limit
C****
      PARAMETER (XSI1=0.5, XSI2=0.5, XSI3=0.5, XSI4=0.5)

      CHARACTER*4 :: AMONTH(12) = (/
     *  'JAN ','FEB ','MAR ','APR ','MAY ','JUNE',
     *  'JULY','AUG ','SEP ','OCT ','NOV ','DEC '/)
      INTEGER :: JDOFM(13) = (
     *     /0,31,59,90,120,151,181,212,243,273,304,334,365/)
      DATA JDPERY/365/,JMPERY/12/,Z1I/.1/
c      DATA RHOW/1000./,RHOI/916.6/,EDPERY/365./
      DATA MONTHO/0/
C**** ORBITAL PARAMETERS FOR EARTH FOR YEAR 2000 A.D.
Cold  DATA SOLS/173./,APHEL/186./,OBLIQ/23.44/,ECCN/.0167/
      DATA OMEGT/282.9/,OBLIQ/23.44/,ECCN/.0167/
c      DATA SHW/4185./,SHI/2060./
C****
C**** THE GLOBAL MEAN PRESSURE IS KEPT CONSTANT AT PSF MILLIBARS
C****
C**** CALCULATE THE CURRENT GLOBAL MEAN PRESSURE
  100 SMASS=0.
      DO 120 J=1,JM
      SPRESS=0.
      DO 110 I=1,IM
  110 SPRESS=SPRESS+P(I,J)
  120 SMASS=SMASS+SPRESS*DXYP(J)
      PBAR=SMASS/AREAG+PTOP
C**** CORRECT PRESSURE FIELD FOR ANY LOSS OF MASS BY TRUNCATION ERROR
      DELTAP=PSF-PBAR
      DO 140 J=1,JM
      DO 140 I=1,IM
  140 P(I,J)=P(I,J)+DELTAP

      CALL CALC_AMPK(LS1-1)

      WRITE (6,901) DELTAP
      DOZ1O=1.
C****
C**** CALCULATE THE DAILY CALENDAR
C****
  200 JYEAR=IYEAR+(IDAY-1)/JDPERY
      JDAY=IDAY-(JYEAR-IYEAR)*JDPERY
      DO 210 MONTH=1,JMPERY
      IF (JDAY.LE.JDOFM(MONTH+1)) GO TO 220
  210 CONTINUE
  220 JDATE=JDAY-JDOFM(MONTH)
      JMONTH=AMONTH(MONTH)
C**** CALCULATE SOLAR ANGLES AND ORBIT POSITION
Cold  RSDIST=(1.+ECCN*COS(TWOPI*(JDAY-APHEL)/EDPERY))**2
Cold  DEC=COS(TWOPI*(JDAY-SOLS)/EDPERY)*OBLIQ*TWOPI/360.
Cold  SIND=SIN(DEC)
Cold  COSD=COS(DEC)
      CALL ORBIT (OBLIQ,ECCN,OMEGT,DFLOAT(JDAY)-.5,RSDIST,SIND,COSD,LAM)
C****
C**** FIND LEAF-AREA INDEX & WATER FIELD CAPACITY FOR GROUND LAYER 1
C****
      COSDAY=COS(TWOPI/EDPERY*JDAY)
      SINDAY=SIN(TWOPI/EDPERY*JDAY)
      DO 270 J=1,JM
        DO 260 I=1,IM
          PEARTH=FEARTH(I,J)
          WFCS(I,J)=24.
          IF (PEARTH.LE.0.) GO TO 260
          CALL GHINIJ(I,J,WFC1)
          WFCS(I,J)=RHOW*WFC1                 ! canopy part changes
  260   CONTINUE
  270 CONTINUE
C      IF (KOCEAN.EQ.1) GO TO 500 ! Lake Ice is prescribed for KOCEAN=1
C****
C**** CALCULATE DAILY OCEAN DATA FROM CLIMATOLOGY
C****
C**** ODATA  1  OCEAN TEMPERATURE (C)
C****        2  RATIO OF OCEAN ICE COVERAGE TO WATER COVERAGE (1)
C****        3  OCEAN ICE AMOUNT OF SECOND LAYER (KG/M**2)
C****
C**** READ IN OBSERVED OCEAN DATA
      IF (MONTH.EQ.MONTHO) GO TO 400
      IF (MONTHO.EQ.0) THEN
C****    READ IN LAST MONTH'S END-OF-MONTH DATA
         LSTMON=MONTH-1
         IF(LSTMON.EQ.0) LSTMON=12
         CALL READT (15,IM*JM,EOST0,IM*JM,EOST0,LSTMON)
         CALL READT (17,IM*JM,ERSI0,IM*JM,ERSI0,LSTMON)
      ELSE
C****    COPY END-OF-OLD-MONTH DATA TO START-OF-NEW-MONTH DATA
         DO 320 I=1,IM*JM
         EOST0(I,1)=EOST1(I,1)
  320    ERSI0(I,1)=ERSI1(I,1)
      END IF
C**** READ IN CURRENT MONTHS DATA: MEAN AND END-OF-MONTH
      MONTHO=MONTH
      IF (MONTH.EQ.1) THEN
         REWIND 15
         REWIND 17
         READ (17)         ! skip over DM-record
      END IF
      CALL READT (15,0,AOST,2*IM*JM,AOST,1) ! READS AOST,EOST1
      CALL READT (17,0,ARSI,2*IM*JM,ARSI,1) ! READS ARSI,ERSI1
C**** FIND INTERPOLATION COEFFICIENTS (LINEAR/QUADRATIC FIT)
      DO 330 J=1,JM
      IMAX=IMAXJ(J)
      DO 330 I=1,IMAX
      BOST(I,J)=EOST1(I,J)-EOST0(I,J)
      COST(I,J)=3.*(EOST1(I,J)+EOST0(I,J)) - 6.*AOST(I,J)
      BRSI(I,J)=0.
      CRSI(I,J)=0.                                   ! extreme cases
      KRSI(I,J)=0                                    ! ice constant
      IF(ARSI(I,J).LE.0.) GO TO 330
      IF(ARSI(I,J).GT.1.) GO TO 330
      BRSI(I,J)=ERSI1(I,J)-ERSI0(I,J)                ! quadratic fit
      CRSI(I,J)=3.*(ERSI1(I,J)+ERSI0(I,J)) - 6.*ARSI(I,J)
      MD=MDMAX+JDATE-16
      IF(ABS(CRSI(I,J)) .GT. ABS(BRSI(I,J))) THEN    ! linear fits
        RSICSQ=CRSI(I,J)*
     *  (ARSI(I,J)*CRSI(I,J) - .25*BRSI(I,J)**2 - CRSI(I,J)**2/12.)
        IF(RSICSQ.lt.0.)  then
C**** RSI uses piecewise linear fit because quadratic fit at apex < 0
          KRSI(I,J) = -1
          BRSI(I,J) = .5*(ERSI0(I,J)**2 + ERSI1(I,J)**2) / ARSI(I,J)
        ELSEIF(RSICSQ.gt.CRSI(I,J)**2)  then
C**** RSI uses piecewise linear fit because quadratic fit at apex > 1
          KRSI(I,J) = 1
          BRSI(I,J) = .5*((ERSI0(I,J)-1.)**2 + (ERSI1(I,J)-1.)**2) /
     /                (ARSI(I,J)-1.)
        END IF
      END IF
  330 CONTINUE
C**** Calculate OST, RSI and MSI for current day
  400 TIME=(JDATE-.5)/(JDOFM(MONTH+1)-JDOFM(MONTH))-.5 ! -.5 < TIME < .5
      DO 450 J=1,JM
      ZIMIN=.5
      ZIMAX=2.
      IF(J.GT.JM/2) ZIMAX=3.5
      IMAX=IMAXJ(J)
      DO 450 I=1,IMAX
      IF(FLAND(I,J).GE.1.)  GO TO 450
      IF (KOCEAN.EQ.1 .AND. FLAKE(I,J).LE.0.) GO TO 450
C**** OST always uses quadratic fit
      IF(KOCEAN.EQ.0) ODATA(I,J,1) = AOST(I,J) + BOST(I,J)*TIME +
     +                               COST(I,J)*(TIME*TIME - 1./12.d0)
      IF(KRSI(I,J)) 410,430,420
C**** RSI uses piecewise linear fit because quadratic fit at apex < 0
  410 IF(ERSI0(I,J)-BRSI(I,J)*(TIME+.5) .gt. 0.)  then
        RSINEW = ERSI0(I,J) - BRSI(I,J)*(TIME+.5)  !  TIME < T0
      ELSEIF(ERSI1(I,J)-BRSI(I,J)*(.5-TIME) .gt. 0.)  then
        RSINEW = ERSI1(I,J) - BRSI(I,J)*(.5-TIME)  !  T1 < TIME
      ELSE
        RSINEW = 0.                                !  T0 < TIME < T1
          endif
      GO TO 440
C**** RSI uses piecewise linear fit because quadratic fit at apex > 1
  420 IF(ERSI0(I,J)-BRSI(I,J)*(TIME+.5) .lt. 1.)  then
        RSINEW = ERSI0(I,J) - BRSI(I,J)*(TIME+.5)  !  TIME < T0
      ELSEIF(ERSI1(I,J)-BRSI(I,J)*(.5-TIME) .lt. 1.)  then
        RSINEW = ERSI1(I,J) - BRSI(I,J)*(.5-TIME)  !  T1 < TIME
      ELSE
        RSINEW = 1.                                !  T0 < TIME < T1
          endif
      GO TO 440
C**** RSI uses quadratic fit
  430 RSINEW = ARSI(I,J) + BRSI(I,J)*TIME +
     +         CRSI(I,J)*(TIME*TIME - 1./12.d0)
  440 ODATA(I,J,2)=RSINEW
      ODATA(I,J,3)=RHOI*(ZIMIN-Z1I+(ZIMAX-ZIMIN)*RSINEW*DM(I,J))
C**** WHEN TGO IS NOT DEFINED, MAKE IT A REASONABLE VALUE
      IF (KOCEAN.EQ.0.AND.ODATA(I,J,1).LT.-1.8) ODATA(I,J,1)=-1.8
C**** REDUCE THE RATIO OF OCEAN ICE TO WATER BY .1*RHOI/ACEOI
c     IF (ODATA(I,J,2).GT.0.) THEN
c        BYZICE=RHOI/(Z1I*RHOI+ODATA(I,J,3))
c        ODATA(I,J,2)=ODATA(I,J,2)*(1.-.06*(BYZICE-1./5.))
c     END IF
C**** ZERO OUT SNOWOI, TG1OI, TG2OI IF THERE IS NO OCEAN ICE
      IF (ODATA(I,J,2).GT.0.) GO TO 450
      GDATA(I,J,1)=0.
      GDATA(I,J,3)=0.
      GDATA(I,J,7)=0.
      GDATA(I,J,15)=0.
      GDATA(I,J,16)=0.
  450 CONTINUE
C**** REPLICATE VALUES AT POLE
      DO 460 I=2,IM
      GDATA(I,JM,1)=GDATA(1,JM,1)
      GDATA(I,JM,3)=GDATA(1,JM,3)
      GDATA(I,JM,7)=GDATA(1,JM,7)
      GDATA(I,JM,15)=GDATA(1,JM,15)
      GDATA(I,JM,16)=GDATA(1,JM,16)
      DO 460 K=1,3
  460 ODATA(I,JM,K)=ODATA(1,JM,K)
      IF (KOCEAN.EQ.0) RETURN
C****
C**** CALCULATE DAILY OCEAN MIXED LAYER DEPTHS FROM CLIMATOLOGY
C****
C**** SAVE PREVIOUS DAY'S MIXED LAYER DEPTH IN WORK2
  500 DO 510 J=1,JM
      DO 510 I=1,IM
CORR  NEXT LINE NOT NEEDED IF Z1O WERE PART OF THE RESTART FILE
      Z1O(I,J)=BLDATA(I,J,5)
  510 Z1OOLD(I,J)=Z1O(I,J)
C*** COMPUTE Z1O ONLY AT THE BEGINNING OF A DAY (OR AT TAUI)
      IF (DOZ1O.EQ.0.) RETURN
C**** READ IN TWO MONTHS OF OCEAN DATA
      X1=1.
      DO 515 J=1,JM
      DO 515 I=1,IM
  515 XZO(I,J)=0.
      IF (JDAY.GE.16) GO TO 520
      MD=JDATE+15
      GO TO 530
  520 IF (JDAY.LE.350) GO TO 550
      MD=JDATE-16
  530 CALL READT (13,0,XZO,IM*JM,XZO,1)
      MDMAX=31
C     DO 540 MX=1,10
C 540 READ (13) M
      CALL READT (13,0,Z1O,IM*JM,Z1O,11)
      GO TO 600
C 550 DO 560 MX=1,12
  550 CALL READT (13,0,Z1O,IM*JM,Z1O,MONTH-1)
C     IF (M.EQ.MONTH) GO TO 570
      IF (JDATE.LT.16) GO TO 580
      IF (MONTH.GT.1) CALL READT (13,0,Z1O,IM*JM,Z1O,1)
C     STOP 'OCEAN FILE ERROR: MLD NOT FOUND FOR CURRENT MONTH'
  570 IF (JDATE.EQ.16) GO TO 601
      MDMAX=JDOFM(MONTH+1)-JDOFM(MONTH)
      MD=JDATE-16
      GO TO 590
  580 MDMAX=JDOFM(MONTH)-JDOFM(MONTH-1)
      MD=MDMAX+JDATE-16
  590 CALL READT (13,0,XZO,IM*JM,XZO,1)
C**** INTERPOLATE OCEAN DATA TO CURRENT DAY
  600 X1=DFLOAT(MDMAX-MD)/MDMAX
  601 X2=1.-X1
      DO 610 J=1,JM
      DO 610 I=1,IM
      Z1O(I,J)=X1*Z1O(I,J)+X2*XZO(I,J)
      IF (ODATA(I,J,2)*(1.-FLAND(I,J)).LE.0.) GO TO 610
C**** MIXED LAYER DEPTH IS INCREASED TO OCEAN ICE DEPTH + 1 METER
      Z1OMIN=1. +  .09166+.001*(GDATA(I,J,1)+ODATA(I,J,3))
      IF (Z1O(I,J).GE.Z1OMIN) GO TO 605
      WRITE(6,602) TAU,I,J,MONTH,Z1O(I,J),Z1OMIN
  602 FORMAT (' INCREASE OF MIXED LAYER DEPTH ',F9.0,3I4,2F10.3)
      Z1O(I,J)=Z1OMIN
  605 IF (Z1OMIN.LE.Z12O(I,J)) GO TO 610
C**** ICE DEPTH+1>MAX MIXED LAYER DEPTH : CHANGE OCEAN TO LAND ICE
      PLICE=FLICE(I,J)
      PLICEN=1.-FEARTH(I,J)
      POICE=(1.-FLAND(I,J))*ODATA(I,J,2)
      POCEAN=(1.-FLAND(I,J))*(1.-ODATA(I,J,2))
      GDATA(I,J,12)=(GDATA(I,J,12)*PLICE+GDATA(I,J,1)*POICE)/PLICEN
      GDATA(I,J,13)=(GDATA(I,J,13)*PLICE+
     *  (GDATA(I,J,3)*XSI1+GDATA(I,J,7)*XSI2)*POICE+
     *  (LHM+SHW*ODATA(I,J,1))*POCEAN/SHI)/PLICEN
      GDATA(I,J,14)=(GDATA(I,J,14)*PLICE+
     *  (GDATA(I,J,15)*XSI3+GDATA(I,J,16)*XSI4)*POICE+
     *  (LHM+SHW*ODATA(I,J,1))*POCEAN/SHI)/PLICEN
      FLAND(I,J)=1.
      FLICE(I,J)=PLICEN
C**** MARK THE POINT FOR RESTART PURPOSES
      GDATA(I,J,1)=-10000.-GDATA(I,J,1)
C**** Transfer PBL-quantities
      ipbl(i,j,1)=0
      ipbl(i,j,2)=0
      ipbl(i,j,3)=1
      do n=1,npbl
      uabl(n,i,j,3)=(uabl(n,i,j,1)*pocean + uabl(n,i,j,2)*poice +
     +               uabl(n,i,j,3)*plice)/plicen
      vabl(n,i,j,3)=(vabl(n,i,j,1)*pocean + vabl(n,i,j,2)*poice +
     +               vabl(n,i,j,3)*plice)/plicen
      tabl(n,i,j,3)=(tabl(n,i,j,1)*pocean + tabl(n,i,j,2)*poice +
     +               tabl(n,i,j,3)*plice)/plicen
      eabl(n,i,j,3)=(eabl(n,i,j,1)*pocean + eabl(n,i,j,2)*poice +
     +               eabl(n,i,j,3)*plice)/plicen
      end do
      cm(i,j,3)=(cm(i,j,1)*pocean + cm(i,j,2)*poice +
     +           cm(i,j,3)*plice)/plicen
      ch(i,j,3)=(ch(i,j,1)*pocean + ch(i,j,2)*poice +
     +           ch(i,j,3)*plice)/plicen
      cq(i,j,3)=(cq(i,j,1)*pocean + cq(i,j,2)*poice +
     +           cq(i,j,3)*plice)/plicen
      WRITE(6,606) 100.*POICE,100.*POCEAN,TAU,I,J
  606 FORMAT(F6.1,'% OCEAN ICE AND',F6.1,'% OPEN OCEAN WERE',
     *  ' CHANGED TO LAND ICE AT TAU,I,J',F10.1,2I4)
  610 CONTINUE
  620 REWIND 13
C**** PREVENT Z1O, THE MIXED LAYER DEPTH, FROM EXCEEDING Z12O
      DO 630 J=1,JM
      DO 630 I=1,IM
      IF (Z1O(I,J).GT.Z12O(I,J)-.01) Z1O(I,J)=Z12O(I,J)
CORR  NEXT LINE NOT NEEDED IF Z1O WERE PART OF THE RESTART FILE
      BLDATA(I,J,5)=Z1O(I,J)
  630 CONTINUE
C**** SET MARKER INDICATING BLDATA(.,.,5)=Z1O
      BLDATA(IM,1,5)=-9999.
      RETURN
C****
      ENTRY DAILY0
C**** DO Z1O COMPUTATION ONLY IF BLDATA(I,J,5) DOES NOT CONTAIN Z1O
      DOZ1O=0.
      IF (BLDATA(IM,1,5).NE.-9999.) DOZ1O=1.
C**** Read in Observed Ocean Data: DM
      CALL READT (17,0,DM,IM*JM,DM,1)
      IF (TAU.GT.TAUI+DT/7200.) GO TO 200
      GO TO 100
C*****
  901 FORMAT ('0PRESSURE ADDED IN GMP IS',F10.6/)
      END
      SUBROUTINE CHECKT (N)
C****
C**** THIS SUBROUTINE CHECKS WHETHER THE TEMPERATURES ARE REASONABLE
C**** FOR DEBUGGING PURPOSES. IT IS TURNED ON BY SETTING IDACC(11)
C**** TO BE POSITIVE.  REMEMBER TO SET IDACC(11) BACK TO ZERO AFTER
C**** THE ERRORS ARE CORRECTED.
C****
      USE CONSTANT, only : grav,rgas,kapa,sday,lhm,lhe,lhs,twopi,omega
      USE E001M12_COM
      USE GEOM
      USE GHYCOM
     &  , only : ghdata
      IMPLICIT REAL*8 (A-H,O-Z)
      IF (IDACC(11).LE.0) RETURN
C**** Check all prog. arrays for Non-numbers
      CALL CHECK3(U,IM,JM,LM,N,1)
      CALL CHECK3(V,IM,JM,LM,N,2)
      CALL CHECK3(T,IM,JM,LM,N,3)
      CALL CHECK3(Q,IM,JM,LM,N,4)
      CALL CHECK3(P,IM,JM, 1,N,5)
      CALL CHECK3(GDATA,IM,JM,16,N,6)
      CALL CHECK3(GHDATA,IM,JM,29,N,7)
      CALL CHECK3(BLDATA,IM,JM,12,N,8)
      CALL CHECK3(ODATA,IM,JM,5,N,9)
C****
C**** CHECK WHETHER GDATA ARE REASONABLE AND CONSISTENT OVER EARTH
C****
      X=1.001
      DO 110 J=1,JM
      IMAX=IMAXJ(J)
      DO 110 I=1,IMAX
      PEARTH=FEARTH(I,J)
      IF (PEARTH.LE.0.) GO TO 110
C-    IF (GDATA(I,J,2).GE.0..AND.GDATA(I,J,2)*GDATA(I,J,4).LE.0.)GOTO 50
C-    WRITE (6,901) N,I,J,TAU,PEARTH,'SNW ',(GDATA(I,J,K),K=2,6)
   50 TGL=GDATA(I,J,4)
      WTRL=GDATA(I,J,5)
      ACEL=GDATA(I,J,6)
      IF ((TGL+60.)*(60.-TGL).GT.0.) GO TO 60
      WRITE (6,901) N,I,J,TAU,PEARTH,'TG1 ',(GDATA(I,J,K),K=2,6)
   60 IF (WTRL.GE.0..AND.ACEL.GE.0..AND.
     *  (WTRL+ACEL).LE.X*WFCS(I,J)) GO TO 110
      WRITE(6,901)N,I,J,TAU,PEARTH,'WTR ',(GDATA(I,J,K),K=2,6),WFCS(I,J)
  110 CONTINUE
      RETURN
  901 FORMAT ('0GDATA OFF, N,I,J,TAU,PEARTH,',3I4,F14.1,F5.2,1X,A4/
     *  ' SNW,x,TG1,WTR1,ICE1, WFC1 ',6F12.4)
      END
      SUBROUTINE CHECK3(A,IM,JM,LM,ID,IFIELD)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(IM,JM,LM)
C CHECKS FOR NAN'S IN REAL 3-D ARRAYS. ALSO CHECKS FOR INF'S.
C INPUT:
C A  - REAL ARRAY
C IM - MAXIMUM OF FIRST DIMENSION
C JM - MAXIMUM OF SECOND DIMENSION
C LM - MAXIMUM OF THIRD DIMENSION
C ID - INTEGER ID
C IFIELD - AN INTEGER ID'ING WHICH FIELD IS BEING TESTED.
C OUTPUT:
C PRINTS TO STANDARD OUTPUT ARRAY ELEMENT NUMBER AND ID
      CHARACTER*16 STR
      CHARACTER*3 :: FLD(9) = (/'u ','v ','t ','q ','p ','g ','gh',
     *     'bl','o '/), RTN(11) = (/'INP','DYN','CND','PRC','RAD',
     *     'SRF','GRD','DCN', 'SDG','FLT','OST'/)
      DO 300 L=1,LM
        DO 200 J=1,JM
          DO 100 I=1,IM
C           WRITE(STR,'(E16.8)')A(I,J,L)
C           K=INDEX(STR,'N')+INDEX(STR,'n')
            IF(.NOT.(A(I,J,L).GT.0..OR.A(I,J,L).LE.0.)) THEN
            WRITE (6,*) FLD(IFIELD),': ',I,J,L,A(I,J,L),'after ',RTN(ID)
              IF (J.LT.JM.AND.J.GT.1) STOP 'CHECK3'
            ENDIF
  100     CONTINUE
  200   CONTINUE
  300 CONTINUE
      RETURN
      END

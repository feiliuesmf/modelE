fc="your_fortran_compiler_name" # e.g. ifort
fcopts=""
fccmd="${fc} ${fcopts}"
nchome="directory_with_netcdf"
nclib="-L${nchome}/lib -lnetcdf"
ncinc="-I${nchome}/include"

#
# Loop over diagnostics categories and compile each Fortran print
# routine with a driver program which opens/closes the input file
# and passes any extra command-line arguments to the print routine
#

for diag in aj areg ajl adiurn consrv
do

progname=prt${diag}

cat > driver.f << EOF
      program driver
      implicit none
      include 'netcdf.inc'
      integer :: status,ifid
      character(len=80) :: ifile,argstr
      character(len=160) :: progargs
      integer :: iarg,nargs
      integer, external :: iargc
      nargs = iargc()
      call getarg(1,ifile)
      progargs=''
      if(nargs.gt.1) then
         call getarg(2,progargs)
         do iarg=3,nargs
           call getarg(iarg,argstr)
           progargs=trim(progargs)//' '//trim(argstr)
         enddo
      endif
      status = nf_open(trim(ifile),nf_nowrite,ifid)
      if(status.ne.nf_noerr) then
        write(6,*) 'nonexistent/non-netcdf input file ',trim(ifile)
        stop
      endif
      call ${progname}(ifid,progargs)
      status = nf_close(ifid)
      end program driver
EOF

cmpcmd="${fccmd} miscnc.f ${progname}.f driver.f -o ${progname} ${ncinc} ${nclib}"
echo $cmpcmd
$cmpcmd  || exit  # terminate the script if any compilation fails
rm -f driver.f

done # end loop over diagnostics categories


#
# Compile the generic scaling routine with an appropriate driver
#

progname=scaleacc

cat > driver.f << EOF
      program driver
      implicit none
      include 'netcdf.inc'
      integer :: status,ifid
      character(len=80) :: ifile,ofile_base
      character(len=20) :: accname
      integer :: i1,i2
      integer, external :: iargc
      if(iargc().ne.2) then
         stop 'usage: scaleacc infile acc_array_name'
      endif
      call getarg(1,ifile)
      call getarg(2,accname)
      i1 = index(ifile,'.acc')
      i2 = index(ifile,'.nc')
      if(i1.gt.0 .and. i2.gt.i1) then
        ofile_base = ifile(1:i1)//trim(accname)//ifile(i1+4:i2-1)
      else
        stop 'expecting acc-file name of the form *.acc*.nc'
      endif
      status = nf_open(trim(ifile),nf_nowrite,ifid)
      if(status.ne.nf_noerr) then
        write(6,*) 'nonexistent/non-netcdf input file ',trim(ifile)
        stop
      endif
      call ${progname}(ifid,accname,ofile_base)
      status = nf_close(ifid)
      end program driver
EOF

cmpcmd="${fccmd} miscnc.f ${progname}.f driver.f -o ${progname} ${ncinc} ${nclib}"
echo $cmpcmd
$cmpcmd  || exit  # terminate the script if any compilation fails
rm -f driver.f

#
# Compile the generic summation routine
#
progname=sumfiles
cmpcmd="${fccmd} miscnc.f ${progname}.f -o ${progname} ${ncinc} ${nclib}"
echo $cmpcmd
$cmpcmd  || exit  # terminate the script if any compilation fails

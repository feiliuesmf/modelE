      MODULE CLD01
!@sum  CLD01 column physics of moist conv. and large-scale condensation
!@auth M.S.Yao/T. Del Genio (modifications by Gavin Schmidt)
!@ver  1.0 (taken from CB265)
!@cont MSTCNV,LSCOND
      USE CONSTANT, only : rgas,grav,lhe,lhs,lhm,kapa,sha,bysha
     *     ,by3,tf,bytf,rvap,bygrav
      USE E001M12_COM, only : IM,LM,TAU
      USE RANDOM
      IMPLICIT NONE
      SAVE
C**** parameters and constants
c      REAL*8, PARAMETER :: TF=273.16d0   !@param TF freezing point (K)
c      REAL*8, PARAMETER :: BYTF=1./TF    !@param BYTF recip. of TF
      REAL*8, PARAMETER :: TI=233.16d0   !@param TI pure ice limit
c      REAL*8, PARAMETER :: RVAP=461.5d0  !@param RVAP
c      REAL*8, PARAMETER :: BY3=1.d0/3.d0 !@param BY3 = 1/3
c      REAL*8, PARAMETER :: BYGRAV=1.d0/GRAV !@param BYGRAV = 1/grav
      REAL*8, PARAMETER :: WMU=.25       !@param WMU
      REAL*8, PARAMETER :: WMUL=.5       !@param WMUL
      REAL*8, PARAMETER :: WMUI=.1d0     !@param WMUI
      REAL*8, PARAMETER :: BRCLD=.2d0    !@param BRCLD

      REAL*8 :: DTCNDS,BYBR,SLHE,SLHS
     *     ,BYDTCN,AXCONS,BXCONS,DTPERD,AGESNX,DQDTX,XMASS

C**** Set-able variables from NAMELIST
!@var LMCM max level for originating MC plumes (set in init_CLD)
      INTEGER :: LMCM
!@var U00wtr critical humidity for water cloud condensation (default)
      REAL*8 :: U00wtr = .7
!@var U00ice critical humidity for ice cloud condensation (default)
      REAL*8 :: U00ice = .7

C**** input variables
!@var RA,UM,VM,U_0,V_0 velocity related variables
      REAL*8, DIMENSION(IM) :: RA !@var
      REAL*8, DIMENSION(IM,LM) :: UM,VM !@var
      REAL*8, DIMENSION(IM,LM) :: U_0,V_0

!@var Miscellaneous vertical arrays set in driver
      REAL*8, DIMENSION(LM+1) :: PLE    !@var PLE
      REAL*8, DIMENSION(LM) :: PL,PLK,AIRM,BYAM,ETAL,TL,QL,TH,RH,WMX
     *     ,VSUBL,AJ8,AJ13,AJ50,AJ51,AJ52,AJ57,AQ,DPDT
      REAL*8, DIMENSION(LM+1) :: PRECNVL
!new arrays must be set to model arrays in driver (before MC)
      REAL*8, DIMENSION(LM) :: SDL,WML
!new arrays must be set to model arrays in driver (after MC)
      REAL*8, DIMENSION(LM) :: TAUMCL,SVLATL,CLDMCL,SVLHXL,SVWMXL
      REAL*8, DIMENSION(LM) :: CSIZEL
!new arrays must be set to model arrays in driver (before COND)
      REAL*8, DIMENSION(LM) :: TTOLDL,CLDSAVL
!new arrays must be set to model arrays in driver (after COND)
      REAL*8, DIMENSION(LM) :: AJ11,AJ55,TAUSSL,CLDSSL

!@var SM,QM Vertical profiles of T/Q
      REAL*8, DIMENSION(LM) ::
     * SM,SXM,SYM,SZM,SXXM,SXYM,SYYM,SYZM,SZZM,SZXM,
     * QM,QXM,QYM,QZM,QXXM,QXYM,QYYM,QYZM,QZZM,QZXM
      COMMON/CLDPRF/
     * SM,SXM,SYM,SZM,SXXM,SXYM,SYYM,SYZM,SZZM,SZXM,
     * QM,QXM,QYM,QZM,QXXM,QXYM,QYYM,QYZM,QZZM,QZXM
      REAL*8 QMALL(10*LM),SMALL(10*LM)
      EQUIVALENCE (QMALL,QM),(SMALL,SM)

!@var KMAX number of surrounding velocity points
      INTEGER ::  KMAX
!@var PEARTH fraction of land in grid box
!@var TS     average surface temperture (C)
      REAL*8 :: PEARTH,TS
!@var LPBL   max level of planetary boundary layer
      INTEGER :: LPBL

C**** output variables
      REAL*8 :: PRCPMC,PRCPSS,HCNDSS,WMSUM
      REAL*8 :: CLDSLWIJ,CLDDEPIJ
      INTEGER :: LMCMAX,LMCMIN

      PRIVATE QSAT,CTMIX

      CONTAINS

      SUBROUTINE MSTCNV
!@sum  MSTCNV moist convective processes (precip, convective clouds,...)
!@auth M.S.Yao/T. Del Genio (modularisation by Gavin Schmidt)
!@ver  1.0 (taken from CB265)
!@calls SUBSID,QSAT,THBAR
      IMPLICIT NONE
      REAL*8 LHX,MPLUME,MCLOUD,MPMAX,MPO

      REAL*8, DIMENSION(0:LM) :: CM     !@var CM
      REAL*8, DIMENSION(IM) :: UMP,VMP,UMDN,VMDN,UMPO,VMPO  !@var
!@var DQM,DSM,DQMR,DSMR Vertical profiles of T/Q and changes
      REAL*8, DIMENSION(LM) ::
     * SMOLD,SXMOLD,SYMOLD,SZMOLD,SXXMOLD,SXYMOLD,SYYMOLD,SYZMOLD,
     *       SZZMOLD,SZXMOLD,
     * QMOLD,QXMOLD,QYMOLD,QZMOLD,QXXMOLD,QXYMOLD,QYYMOLD,QYZMOLD,
     *       QZZMOLD,QZXMOLD,
     * DQM,DQXM,DQYM,DQZM,DQXXM,DQXYM,DQYYM,DQYZM,DQZZM,DQZXM,
     * DSM,DSXM,DSYM,DSZM,DSXXM,DSXYM,DSYYM,DSYZM,DSZZM,DSZXM,
     * DQMR,DQXMR,DQYMR,DQZMR,DQXXMR,DQXYMR,DQYYMR,DQYZMR,DQZZMR,DQZXMR,
     * DSMR,DSXMR,DSYMR,DSZMR,DSXXMR,DSXYMR,DSYYMR,DSYZMR,DSZZMR,DSZXMR

      COMMON/WORK3/
     * SMOLD,SXMOLD,SYMOLD,SZMOLD,SXXMOLD,SXYMOLD,SYYMOLD,SYZMOLD,
     *     SZZMOLD,SZXMOLD,
     * QMOLD,QXMOLD,QYMOLD,QZMOLD,QXXMOLD,QXYMOLD,QYYMOLD,QYZMOLD,
     *     QZZMOLD,QZXMOLD,
     * DQM,DQXM,DQYM,DQZM,DQXXM,DQXYM,DQYYM,DQYZM,DQZZM,DQZXM,
     * DSM,DSXM,DSYM,DSZM,DSXXM,DSXYM,DSYYM,DSYZM,DSZZM,DSZXM,
     * DQMR,DQXMR,DQYMR,DQZMR,DQXXMR,DQXYMR,DQYYMR,DQYZMR,DQZZMR,DQZXMR,
     * DSMR,DSXMR,DSYMR,DSZMR,DSXXMR,DSXYMR,DSYYMR,DSYZMR,DSZZMR,DSZXMR
      REAL*8 QMOLDALL(10*LM),SMOLDALL(10*LM),DMALL(40*LM)
      EQUIVALENCE (QMOLDALL,QMOLD),(SMOLDALL,SMOLD),(DMALL,DQM)

      REAL*8, DIMENSION(LM) ::
     *     DM,COND,CDHEAT,CCM,SM1,QM1,DMR,ML,SMT,QMT,TPSAV,SVTP

      INTEGER LDRAFT,LEVAP,LMAX,LMIN,MCCONT,MAXLVL
     *     ,MINLVL,ITER,IC,LFRZ
      REAL*8 TERM1,FMP0,SMO1
     *     ,QMO1,SMO2,QMO2,SDN,QDN,SUP,QUP,SEDGE,QEDGE,WMDN,WMUP,SVDN
     *     ,SVUP,WMEDG,SVEDG,DMSE,FPLUME,DFP,FMP2,FRAT1,FRAT2,SMN1
     *     ,QMN1,SMN2,QMN2,SMP,QMP,TP,GAMA,DQSUM,TNX
     *     ,DQ,DMSE1,FTYPE,SXMP,SYMP,SXXMP,SXYMP,SYYMP,QXMP,QYMP
     *     ,QXXMP,QXYMP,QYYMP,CDHDRT,DDRAFT,DELTA
     *     ,ALPHA,BETA,CDHM,CDHSUM,CLDM,CLDREF,CONSUM,DQEVP
     *     ,DQRAT,EPLUME,ETADN,ETAL1,EVPSUM,FCDH
     *     ,FCDH1,FCLD,FCLOUD,FDDL,FDDP,FENTR,FENTRA,FEVAP,FLEFT
     *     ,FQCOND,FSEVP,FSSUM,HEAT1
     *     ,PRHEAT,PRCP
     *     ,QMDN,QMIX,QMPMAX,QMPT,QNX,QSATC,QSATMP,QXMDN
     *     ,QXMPMAX,QXXMDN,QXXMPMAX,QXYMDN
     *     ,QXYMPMAX,QYMDN,QYMPMAX,QYYMDN
     *     ,QYYMPMAX,RCLD,RCLDE,SLH,SMDN,SMIX,SMPMAX,SMPT,SUMAJ
     *     ,SUMDP,SXMDN,SXMPMAX,SXXMDN,SXXMPMAX,SXYMDN
     *     ,SXYMPMAX,SYMDN,SYMPMAX,SYYMDN,SYYMPMAX
     *     ,TOLD,TOLD1,TEMWM,TEM,WTEM,WCONST,WORK,SMPO,QMPO

      LOGICAL MC1

      REAL*8,  PARAMETER :: CK1 = 1.       !@param CK1  ???
      REAL*8,  PARAMETER :: DELTX=.608d0   !@param DELTX ???

      INTEGER K,L,N  !@var K,L,N loop variables
      INTEGER ITYPE
      REAL*8, DIMENSION(IM,LM) :: DUM,DVM !@var

      REAL*8 THBAR
C****
C**** MOIST CONVECTION
C****
C**** CONVECTION OCCURS AT THE LOWEST MOIST CONVECTIVELY UNSTABLE
C**** LEVEL AND CONTINUES UNTIL A STABLE LAYER PAIR IS REACHED.  RE-
C**** EVAPORATION AND PRECIPITATION ARE COMPUTED AT THE END OF THIS
C**** CYCLE.  THE WHOLE PROCESS MAY BE REPEATED FROM A NEW LOWEST
C**** UNSTABLE LEVEL.
C****
      LMCMIN=0
      LMCMAX=0
      MCCONT=0
C**** initiallise arrays of computed ouput
      TAUMCL=0
      SVWMXL=0
      SVLATL=0
      VSUBL=0
      PRECNVL=0
      CLDMCL=0
      CLDSLWIJ=0
      CLDDEPIJ=0
      PRCPMC=0.
      SVTP=0
      CSIZEL=10.              !  effective droplet radius in stem 
C**** zero out diagnostics
         AJ8 =0.
         AJ13=0.
         AJ50=0.
         AJ51=0.
         AJ52=0.
         AJ57=0.
C**** save initial values
      SM1=SM
      QM1=QM
C**** OUTER MC LOOP OVER BASE LAYER
      DO 600 LMIN=1,LMCM-1
      MAXLVL=0
      MINLVL=LM
C****
C**** COMPUTE THE CONVECTIVE MASS OF THE NON-ENTRAINING PART
C****
      TERM1=-10.*CK1*SDL(LMIN+1)*BYGRAV
      FMP0=TERM1*XMASS
      IF(FMP0.LE.0.) FMP0=0.
C**** CREATE A PLUME IN THE BOTTOM LAYER
C****
C**** ITERATION TO FIND FPLUME WHICH RESTORES THE ATM TO NEUTRAL STATE
C****
      SMO1=SM(LMIN)
      QMO1=QM(LMIN)
      SMO2=SM(LMIN+1)
      QMO2=QM(LMIN+1)
      SDN=SMO1*BYAM(LMIN)
      SUP=SMO2*BYAM(LMIN+1)
      SEDGE=THBAR(SUP,SDN)
      QDN=QMO1*BYAM(LMIN)
      QUP=QMO2*BYAM(LMIN+1)
      WMDN=WML(LMIN)
      WMUP=WML(LMIN+1)
      SVDN=SDN*(1.+DELTX*QDN-WMDN)
      SVUP=SUP*(1.+DELTX*QUP-WMUP)
      QEDGE=.5*(QUP+QDN)
      WMEDG=.5*(WMUP+WMDN)
      SVEDG=SEDGE*(1.+DELTX*QEDGE-WMEDG)
      LHX=LHE
      SLH=LHX*BYSHA
      DMSE=(SVUP-SVEDG)*PLK(LMIN+1)+(SVEDG-SVDN)*PLK(LMIN)+
     *  SLHE*(QSAT(SUP*PLK(LMIN+1),LHX,PL(LMIN+1))-QDN)
      IF(DMSE.GT.-1.E-10) GO TO 600
C****
      FPLUME=.25
      DFP = .25
      DO ITER=1,8
      DFP=DFP*0.5
      FMP2=FPLUME*AIRM(LMIN)
      FRAT1=FMP2*BYAM(LMIN+1)
      FRAT2=FMP2*BYAM(LMIN+2)
      SMN1=SMO1*(1.-FPLUME)+FRAT1*SMO2
      QMN1=QMO1*(1.-FPLUME)+FRAT1*QMO2
      SMN2=SMO2*(1.-FRAT1)+FRAT2*SM(LMIN+2)
      QMN2=QMO2*(1.-FRAT1)+FRAT2*QM(LMIN+2)
      SMP=SMO1*FPLUME
      QMP=QMO1*FPLUME
      TP=SMO1*PLK(LMIN+1)*BYAM(LMIN)
      QSATMP=FMP2*QSAT(TP,LHX,PL(LMIN+1))
      GAMA=SLH*LHX*BXCONS*QSATMP/(TP*TP*FMP2)
      DQSUM=(QMP-QSATMP)/(1.+GAMA)
      IF(DQSUM.LE.0.) GO TO 205
      FEVAP=.5*FPLUME
      MCLOUD=FEVAP*AIRM(LMIN+1)
      TNX=SMO2*PLK(LMIN+1)*BYAM(LMIN+1)
      QNX=QMO2*BYAM(LMIN+1)
      QSATC=QSAT(TNX,LHX,PL(LMIN+1))
      DQ=MCLOUD*(QSATC-QNX)/(1.+SLH*LHX*BXCONS*QSATC/(TNX*TNX))
      IF(DQ.GT.DQSUM) DQ=DQSUM
      SMN2=SMN2-SLH*DQ/PLK(LMIN+1)
      QMN2=QMN2+DQ
      DQSUM=DQSUM-DQ
      IF(DQSUM.LE.0.) GO TO 205
      MCLOUD=FEVAP*AIRM(LMIN)
      TNX=SMO1*PLK(LMIN)*BYAM(LMIN)
      QNX=QMO1*BYAM(LMIN)
      QSATC=QSAT(TNX,LHX,PL(LMIN))
      DQ=MCLOUD*(QSATC-QNX)/(1.+SLH*LHX*BXCONS*QSATC/(TNX*TNX))
      IF(DQ.GT.DQSUM) DQ=DQSUM
      SMN1=SMN1-SLH*DQ/PLK(LMIN)
      QMN1=QMN1+DQ
  205 SDN=SMN1*BYAM(LMIN)
      SUP=SMN2*BYAM(LMIN+1)
      SEDGE=THBAR(SUP,SDN)
      QDN=QMN1*BYAM(LMIN)
      QUP=QMN2*BYAM(LMIN+1)
      SVDN=SDN*(1.+DELTX*QDN-WMDN)
      SVUP=SUP*(1.+DELTX*QUP-WMUP)
      QEDGE=.5*(QUP+QDN)
      SVEDG=SEDGE*(1.+DELTX*QEDGE-WMEDG)
      DMSE1=(SVUP-SVEDG)*PLK(LMIN+1)+(SVEDG-SVDN)*PLK(LMIN)+
     *  SLHE*(QSAT(SUP*PLK(LMIN+1),LHX,PL(LMIN+1))-QDN)
      IF (ABS(DMSE1).LE.1.d-3) GO TO 411
      IF(DMSE1.GT.1.d-3) FPLUME=FPLUME-DFP
      IF(DMSE1.LT.-1.d-3) FPLUME=FPLUME+DFP
      END DO
  411 IF(FPLUME.LE..001) GO TO 600
C****
C**** ITERATION THROUGH CLOUD TYPES
C****
      ITYPE=2                        ! always 2 types of clouds:
C     IF(LMIN.LE.2) ITYPE=2          ! entraining & non-entraining
      FTYPE=1.
C**** SET PROFILE TO BE CONSTANT FOR BOTH TYPES OF CLOUDS
      DO L=1,10*LM
        QMOLDALL(L) = QMALL(L)
        SMOLDALL(L) = SMALL(L)
      END DO
      DO 570 IC=1,ITYPE
C**** INITIALLISE VARIABLES USED FOR EACH TYPE
      DO L=1,LM
        COND(L)=0.
        CDHEAT(L)=0.
        DM(L)=0.
        DMR(L)=0.
      END DO
      DUM(1:KMAX,:)=0.
      DVM(1:KMAX,:)=0.
      DO L=1,40*LM
        DMALL(L) = 0.
      END DO
      MC1=.FALSE.
      LHX=LHE
      MPLUME=MIN(1.*AIRM(LMIN),1.*AIRM(LMIN+1))
      IF(MPLUME.GT.FMP2) MPLUME=FMP2
      IF(ITYPE.EQ.2) THEN
      FTYPE=1.
      IF(MPLUME.GT.FMP0) FTYPE=FMP0/MPLUME
      IF(IC.EQ.2) FTYPE=1.-FTYPE
      IF(FTYPE.LT.0.001) GO TO 570
      END IF
      MPLUME=MPLUME*FTYPE
C     FPLUM0=FMP1*BYAM(LMIN)
      FPLUME=MPLUME*BYAM(LMIN)
      SMP  =  SMOLD(LMIN)*FPLUME
      SXMP = SXMOLD(LMIN)*FPLUME
      SYMP = SYMOLD(LMIN)*FPLUME
      SXXMP=SXXMOLD(LMIN)*FPLUME
      SYYMP=SYYMOLD(LMIN)*FPLUME
      SXYMP=SXYMOLD(LMIN)*FPLUME
      QMP  =  QMOLD(LMIN)*FPLUME
      QXMP = QXMOLD(LMIN)*FPLUME
      QYMP = QYMOLD(LMIN)*FPLUME
      QXXMP=QXXMOLD(LMIN)*FPLUME
      QYYMP=QYYMOLD(LMIN)*FPLUME
      QXYMP=QXYMOLD(LMIN)*FPLUME
      TPSAV(LMIN)=SMP*PLK(LMIN)/MPLUME
      DMR(LMIN)=-MPLUME
        DSMR(LMIN)=-SMP
       DSXMR(LMIN)=-SXMP
       DSYMR(LMIN)=-SYMP
      DSXXMR(LMIN)=-SXXMP
      DSYYMR(LMIN)=-SYYMP
      DSXYMR(LMIN)=-SXYMP
       DSZMR(LMIN)=- SZMOLD(LMIN)*FPLUME
      DSZZMR(LMIN)=-SZZMOLD(LMIN)*FPLUME
      DSYZMR(LMIN)=-SYZMOLD(LMIN)*FPLUME
      DSZXMR(LMIN)=-SZXMOLD(LMIN)*FPLUME
        DQMR(LMIN)=-QMP
       DQXMR(LMIN)=-QXMP
       DQYMR(LMIN)=-QYMP
      DQXXMR(LMIN)=-QXXMP
      DQYYMR(LMIN)=-QYYMP
      DQXYMR(LMIN)=-QXYMP
       DQZMR(LMIN)=- QZMOLD(LMIN)*FPLUME
      DQZZMR(LMIN)=-QZZMOLD(LMIN)*FPLUME
      DQYZMR(LMIN)=-QYZMOLD(LMIN)*FPLUME
      DQZXMR(LMIN)=-QZXMOLD(LMIN)*FPLUME
      DO K=1,KMAX !vref
         UMP(K)=UM(K,LMIN)*FPLUME !vref
         DUM(K,LMIN)=-UMP(K) !vref
         VMP(K)=VM(K,LMIN)*FPLUME !vref
         DVM(K,LMIN)=-VMP(K) !vref
      ENDDO !vref
C****
C**** RAISE THE PLUME TO THE TOP OF CONVECTION AND CALCULATE
C**** ENTRAINMENT, CONDENSATION, AND SECONDARY MIXING
C****
      CDHSUM=0.
      CDHDRT=0.
      ETADN=0.
      LDRAFT=LM
      EVPSUM=0.
      DDRAFT=0.
      LFRZ=0
      LMAX=LMIN
 220  L=LMAX+1
      SVTP(L)=SMP*PLK(L)/(MPLUME+1.E-20)
C**** TEST FOR SUFFICIENT AIR, MOIST STATIC STABILITY AND ENERGY
C     IF(L.GT.LMIN+1.AND.SDL(L).GT.0.) GO TO 340
      IF(MPLUME.LE..001*AIRM(L)) GO TO 340
      SDN=SMP/MPLUME
      SUP=SM1(L)*BYAM(L)
      QDN=QMP/MPLUME
      QUP=QM1(L)*BYAM(L)
      WMDN=0.
      WMUP=WML(L)
      SVDN=SDN*(1.+DELTX*QDN-WMDN)
      SVUP=SUP*(1.+DELTX*QUP-WMUP)
      IF(LMAX.GT.LMIN) THEN
      SEDGE=THBAR(SUP,SDN)
      QEDGE=.5*(QUP+QDN)
      WMEDG=.5*(WMUP+WMDN)
      SVEDG=SEDGE*(1.+DELTX*QEDGE-WMEDG)
      LHX=LHE
      DMSE=(SVUP-SVEDG)*PLK(L)+(SVEDG-SVDN)*PLK(L-1)+
     *  SLHE*(QSAT(SUP*PLK(L),LHX,PL(L))-QDN)
      IF(DMSE.GT.-1.E-10) GO TO 340
      END IF
      IF(PLK(L-1)*(SVUP-SVDN)+SLHE*(QUP-QDN).GE.0.) GO TO 340
C****
C**** DEPOSIT PART OF THE PLUME IN LOWER LAYER
C****
      DELTA=0.
      SMPO =SMP
      QMPO =QMP
      MPO = MPLUME
      DO K=1,KMAX !vref
         UMPO(K)=UMP(K) !vref
         VMPO(K)=VMP(K) !vref
      ENDDO !vref
C     IF(MPLUME.GT.AIRM(L)) THEN
      IF(MPLUME.GT..95*AIRM(L)) THEN
C     DELTA=(MPLUME-AIRM(L))/MPLUME
      DELTA=(MPLUME-.95*AIRM(L))/MPLUME
      SMP = SMP  *(1.-DELTA)
      QMP = QMP  *(1.-DELTA)
C     MPLUME=AIRM(L)
      MPLUME=.95*AIRM(L)
      DO K=1,KMAX !vref
         UMP(K)=UMP(K)-UMP(K)*DELTA !vref
         VMP(K)=VMP(K)-VMP(K)*DELTA !vref
      ENDDO !vref
      END IF
C****
C**** CONVECTION IN UPPER LAYER   (WORK DONE COOLS THE PLUME)
C****
      WORK=MPLUME*(SUP-SDN)*(PLK(L-1)-PLK(L))/PLK(L-1)
C     SMP=SMP-WORK
      DSM(L-1)=DSM(L-1)-WORK
      CCM(L-1)=MPLUME
      DM(L-1)=DM(L-1)+DELTA*MPO
C**** TEST FOR CONENSATION ALSO DETERMINES IF PLUME REACHES UPPER LAYER
      TP=SMP*PLK(L)/MPLUME
      TPSAV(L)=TP
      IF(TPSAV(L-1).GE.TF.AND.TPSAV(L).LT.TF) LFRZ=L-1
      IF(TP.LT.TI) LHX=LHS
      QSATMP=MPLUME*QSAT(TP,LHX,PL(L))
      IF(QMP.LT.QSATMP) GO TO 340
      IF(TP.GE.TF.OR.LHX.EQ.LHS) GO TO 290
      LHX=LHS
      QSATMP=MPLUME*QSAT(TP,LHX,PL(L))
  290 SLH=LHX*BYSHA
        DSM(L-1)=  DSM(L-1)+DELTA*SMPO
       DSXM(L-1)= DSXM(L-1)+DELTA*SXMP
       DSYM(L-1)= DSYM(L-1)+DELTA*SYMP
      DSXXM(L-1)=DSXXM(L-1)+DELTA*SXXMP
      DSYYM(L-1)=DSYYM(L-1)+DELTA*SYYMP
      DSXYM(L-1)=DSXYM(L-1)+DELTA*SXYMP
c      SMP = SMP *(1.-DELTA)     ! already set above
      SXMP = SXMP*(1.-DELTA)
      SYMP = SYMP*(1.-DELTA)
      SXXMP=SXXMP*(1.-DELTA)
      SYYMP=SYYMP*(1.-DELTA)
      SXYMP=SXYMP*(1.-DELTA)
        DQM(L-1)=  DQM(L-1)+DELTA*QMPO
       DQXM(L-1)= DQXM(L-1)+DELTA*QXMP
       DQYM(L-1)= DQYM(L-1)+DELTA*QYMP
      DQXXM(L-1)=DQXXM(L-1)+DELTA*QXXMP
      DQYYM(L-1)=DQYYM(L-1)+DELTA*QYYMP
      DQXYM(L-1)=DQXYM(L-1)+DELTA*QXYMP
c      QMP = QMP *(1.-DELTA)     ! already set above
      QXMP = QXMP*(1.-DELTA)
      QYMP = QYMP*(1.-DELTA)
      QXXMP=QXXMP*(1.-DELTA)
      QYYMP=QYYMP*(1.-DELTA)
      QXYMP=QXYMP*(1.-DELTA)
      DO K=1,KMAX !vref
         DUM(K,L-1)=DUM(K,L-1)+UMPO(K)*DELTA !vref
         DVM(K,L-1)=DVM(K,L-1)+VMPO(K)*DELTA !vref
      ENDDO !vref
C****
C**** ENTRAINMENT
C****
      IF(IC.EQ.2) THEN
      FENTR=ETAL(L)*FPLUME
      IF(FENTR+FPLUME.GT.1.) FENTR=1.-FPLUME
      ETAL1=FENTR/(FPLUME+1.E-20)
      FPLUME=FPLUME+FENTR
      EPLUME=MPLUME*ETAL1
C**** Reduce EPLUME so that mass flux is less than mass in box
      IF (EPLUME.GT.AIRM(L)*0.975d0-MPLUME) THEN
        EPLUME=AIRM(L)*0.975d0-MPLUME
      END IF
      MPLUME=MPLUME+EPLUME
      FENTRA = EPLUME*BYAM(L)
      DSMR(L)=DSMR(L)-EPLUME*SUP        ! = DSM(L)-SM(L)*FENTRA
       DSXMR(L)= DSXMR(L)- SXM(L)*FENTRA
       DSYMR(L)= DSYMR(L)- SYM(L)*FENTRA
       DSZMR(L)= DSZMR(L)- SZM(L)*FENTRA
      DSXXMR(L)=DSXXMR(L)-SXXM(L)*FENTRA
      DSYYMR(L)=DSYYMR(L)-SYYM(L)*FENTRA
      DSZZMR(L)=DSZZMR(L)-SZZM(L)*FENTRA
      DSXYMR(L)=DSXYMR(L)-SXYM(L)*FENTRA
      DSYZMR(L)=DSYZMR(L)-SYZM(L)*FENTRA
      DSZXMR(L)=DSZXMR(L)-SZXM(L)*FENTRA
      DQMR(L)=DQMR(L)-EPLUME*QUP        ! = DQM(L)-QM(L)*FENTRA
       DQXMR(L)= DQXMR(L)- QXM(L)*FENTRA
       DQYMR(L)= DQYMR(L)- QYM(L)*FENTRA
       DQZMR(L)= DQZMR(L)- QZM(L)*FENTRA
      DQXXMR(L)=DQXXMR(L)-QXXM(L)*FENTRA
      DQYYMR(L)=DQYYMR(L)-QYYM(L)*FENTRA
      DQZZMR(L)=DQZZMR(L)-QZZM(L)*FENTRA
      DQXYMR(L)=DQXYMR(L)-QXYM(L)*FENTRA
      DQYZMR(L)=DQYZMR(L)-QYZM(L)*FENTRA
      DQZXMR(L)=DQZXMR(L)-QZXM(L)*FENTRA
      DMR(L)=DMR(L)-EPLUME
      SMP=SMP+EPLUME*SUP
       SXMP= SXMP+ SXM(L)*FENTRA
       SYMP= SYMP+ SYM(L)*FENTRA
      SXXMP=SXXMP+SXXM(L)*FENTRA
      SYYMP=SYYMP+SYYM(L)*FENTRA
      SXYMP=SXYMP+SXYM(L)*FENTRA
      QMP=QMP+EPLUME*QUP
       QXMP= QXMP+ QXM(L)*FENTRA
       QYMP= QYMP+ QYM(L)*FENTRA
      QXXMP=QXXMP+QXXM(L)*FENTRA
      QYYMP=QYYMP+QYYM(L)*FENTRA
      QXYMP=QXYMP+QXYM(L)*FENTRA
      DO K=1,KMAX !vref
         UMP(K)=UMP(K)+U_0(K,L)*EPLUME !vref
         DUM(K,L)=DUM(K,L)-U_0(K,L)*EPLUME !vref
         VMP(K)=VMP(K)+V_0(K,L)*EPLUME !vref
         DVM(K,L)=DVM(K,L)-V_0(K,L)*EPLUME !vref
      ENDDO !vref
      END IF
C****
C**** CHECK THE DOWNDRAFT POSSIBILITY
C****
      IF(L-LMIN.LE.1) GO TO 291
      IF(ETADN.GT.1.E-10) GO TO 291
      SMIX=.5*(SUP+SMP/MPLUME)
      QMIX=.5*(QUP+QMP/MPLUME)
C     WMIX=.5*(WMUP+WMDN)
C     SVMIX=SMIX*(1.+DELTX*QMIX-WMIX)
C     DMMIX=(SVUP-SVMIX)*PLK(L)+
C    *  SLHE*(QSAT(SUP*PLK(L),LHX,PL(L))-QMIX)
C     IF(DMMIX.LT.1.E-10) GO TO 291
      IF(SMIX.GE.SUP) GO TO 291
      IF(PL(L).GT.700.) GO TO 291
      LDRAFT=L
      ETADN=BY3
      FLEFT=1.-.5*ETADN
      DDRAFT=ETADN*MPLUME
      FDDP = .5*DDRAFT/MPLUME
      FDDL = .5*DDRAFT*BYAM(L)
      MPLUME=FLEFT*MPLUME
      SMDN=DDRAFT*SMIX         ! = SM(L)*FDDL +  SMP*FDDP
       SXMDN= SXM(L)*FDDL +  SXMP*FDDP
       SYMDN= SYM(L)*FDDL +  SYMP*FDDP
      SXXMDN=SXXM(L)*FDDL + SXXMP*FDDP
      SYYMDN=SYYM(L)*FDDL + SYYMP*FDDP
      SXYMDN=SXYM(L)*FDDL + SXYMP*FDDP
      SMP=FLEFT*SMP
       SXMP= SXMP*FLEFT
       SYMP= SYMP*FLEFT
      SXXMP=SXXMP*FLEFT
      SYYMP=SYYMP*FLEFT
      SXYMP=SXYMP*FLEFT
      QMDN=DDRAFT*QMIX        ! = QM(L)*FDDL +  QMP*FDDP
       QXMDN= QXM(L)*FDDL +  QXMP*FDDP
       QYMDN= QYM(L)*FDDL +  QYMP*FDDP
      QXXMDN=QXXM(L)*FDDL + QXXMP*FDDP
      QYYMDN=QYYM(L)*FDDL + QYYMP*FDDP
      QXYMDN=QXYM(L)*FDDL + QXYMP*FDDP
      QMP=FLEFT*QMP
       QXMP= QXMP*FLEFT
       QYMP= QYMP*FLEFT
      QXXMP=QXXMP*FLEFT
      QYYMP=QYYMP*FLEFT
      QXYMP=QXYMP*FLEFT
      DMR(L) = DMR(L)-.5*DDRAFT
      DSMR(L)=DSMR(L)-.5*DDRAFT*SUP        ! = DSM(L)-SM(L)*FDDL
       DSXMR(L)= DSXMR(L) -  SXM(L)*FDDL
       DSYMR(L)= DSYMR(L) -  SYM(L)*FDDL
       DSZMR(L)= DSZMR(L) -  SZM(L)*FDDL
      DSXXMR(L)=DSXXMR(L) - SXXM(L)*FDDL
      DSYYMR(L)=DSYYMR(L) - SYYM(L)*FDDL
      DSZZMR(L)=DSZZMR(L) - SZZM(L)*FDDL
      DSXYMR(L)=DSXYMR(L) - SXYM(L)*FDDL
      DSYZMR(L)=DSYZMR(L) - SYZM(L)*FDDL
      DSZXMR(L)=DSZXMR(L) - SZXM(L)*FDDL
      DQMR(L)=DQMR(L)-.5*DDRAFT*QUP       ! = DQM(L)-QM(L)*FDDL
       DQXMR(L)= DQXMR(L) -  QXM(L)*FDDL
       DQYMR(L)= DQYMR(L) -  QYM(L)*FDDL
       DQZMR(L)= DQZMR(L) -  QZM(L)*FDDL
      DQXXMR(L)=DQXXMR(L) - QXXM(L)*FDDL
      DQYYMR(L)=DQYYMR(L) - QYYM(L)*FDDL
      DQZZMR(L)=DQZZMR(L) - QZZM(L)*FDDL
      DQXYMR(L)=DQXYMR(L) - QXYM(L)*FDDL
      DQYZMR(L)=DQYZMR(L) - QYZM(L)*FDDL
      DQZXMR(L)=DQZXMR(L) - QZXM(L)*FDDL
      DO K=1,KMAX !vref
         UMDN(K)=.5*(ETADN*UMP(K)+DDRAFT*U_0(K,L)) !vref
         UMP(K)=UMP(K)*FLEFT !vref
         DUM(K,L)=DUM(K,L)-.5*DDRAFT*U_0(K,L) !vref
         VMDN(K)=.5*(ETADN*VMP(K)+DDRAFT*V_0(K,L)) !vref
         VMP(K)=VMP(K)*FLEFT !vref
         DVM(K,L)=DVM(K,L)-.5*DDRAFT*V_0(K,L) !vref
      ENDDO !vref
c         TMIX=SMIX*PLK(L)
c         HMIX=SHA*TMIX+LHE*QMIX
c         TENV=SUP*PLK(L)
c         QENV=QUP
c         HENV=SHA*TENV+LHE*QENV
c         HSENV=SHA*TENV+LHE*QSAT(TENV,LHX,PL(L))
C        IF (I.EQ.35.AND.J.EQ.13) WRITE(6,299)
C    *     LDRAFT,TMIX,QMIX,HMIX,TENV,QENV,HENV,HSENV
c  299 FORMAT(1X,'LDD TMIX QMIX HMIX TENV QENV HENV HSENV =',
c     *  I3,7E12.4/)
C****
C**** CONDENSE VAPOR IN THE PLUME AND ADD LATENT HEAT
C****
  291 DQSUM=0.
      SMPT=SMP
      QMPT=QMP
      DO 292 N=1,3
      TP=SMP*PLK(L)/MPLUME
      QSATMP=MPLUME*QSAT(TP,LHX,PL(L))
      GAMA=SLH*LHX*BXCONS*QSATMP/(TP*TP*MPLUME)
      DQ=(QMP-QSATMP)/(1.+GAMA)
      SMP=SMP+SLH*DQ/PLK(L)
      QMP=QMP-DQ
  292 DQSUM=DQSUM+DQ
      IF(DQSUM.GE.0.) THEN
      FQCOND = 0
      IF (QMPT.gt.1d-20) FQCOND = DQSUM/QMPT
       QXMP =  QXMP*(1.-FQCOND)
       QYMP =  QYMP*(1.-FQCOND)
      QXXMP = QXXMP*(1.-FQCOND)
      QYYMP = QYYMP*(1.-FQCOND)
      QXYMP = QXYMP*(1.-FQCOND)
      ELSE  ! no change
        DQSUM=0.
        SMP=SMPT
        QMP=QMPT
      END IF
      COND(L)=DQSUM
      TAUMCL(L)=TAUMCL(L)+DQSUM
      CDHEAT(L)=SLH*COND(L)
      CDHSUM=CDHSUM+CDHEAT(L)
      IF(ETADN.GT.1.E-10) CDHDRT=CDHDRT+SLH*COND(L)
C****
C**** UPDATE ALL QUANTITIES CARRIED BY THE PLUME
C****
      MCCONT=MCCONT+1
      IF(MCCONT.EQ.1) MC1=.TRUE.
      IF(MC1.AND.PLE(LMIN)-PLE(L+2).GE.450.) SVLATL(L)=LHX
      SMPMAX=SMP
       SXMPMAX =  SXMP
       SYMPMAX =  SYMP
      SXXMPMAX = SXXMP
      SYYMPMAX = SYYMP
      SXYMPMAX = SXYMP
      QMPMAX=QMP
       QXMPMAX =  QXMP
       QYMPMAX =  QYMP
      QXXMPMAX = QXXMP
      QYYMPMAX = QYYMP
      QXYMPMAX = QXYMP
      MPMAX=MPLUME
      LMAX = LMAX + 1
      IF (LMAX.LT.LM) GO TO 220   ! CHECK FOR NEXT POSSIBLE LMAX
C**** UPDATE CHANGES CARRIED BY THE PLUME IN THE TOP CLOUD LAYER
  340 IF(LMIN.EQ.LMAX) GO TO 600
      IF(TPSAV(LMAX).GE.TF) LFRZ=LMAX
      DM(LMAX)=DM(LMAX)+MPMAX
      DSM(LMAX)=DSM(LMAX)+SMPMAX
       DSXM(LMAX)= DSXM(LMAX) +  SXMPMAX
       DSYM(LMAX)= DSYM(LMAX) +  SYMPMAX
      DSXXM(LMAX)=DSXXM(LMAX) + SXXMPMAX
      DSYYM(LMAX)=DSYYM(LMAX) + SYYMPMAX
      DSXYM(LMAX)=DSXYM(LMAX) + SXYMPMAX
      DQM(LMAX)=DQM(LMAX)+QMPMAX
       DQXM(LMAX)= DQXM(LMAX) +  QXMPMAX
       DQYM(LMAX)= DQYM(LMAX) +  QYMPMAX
      DQXXM(LMAX)=DQXXM(LMAX) + QXXMPMAX
      DQYYM(LMAX)=DQYYM(LMAX) + QYYMPMAX
      DQXYM(LMAX)=DQXYM(LMAX) + QXYMPMAX
      CCM(LMAX)=0.
      DO K=1,KMAX !vref
         DUM(K,LMAX)=DUM(K,LMAX)+UMP(K) !vref
         DVM(K,LMAX)=DVM(K,LMAX)+VMP(K) !vref
      ENDDO !vref
      CDHM=0.
      IF(MINLVL.GT.LMIN) MINLVL=LMIN
      IF(MAXLVL.LT.LMAX) MAXLVL=LMAX
      IF(LMCMIN.EQ.0) LMCMIN=LMIN
      IF(LMCMAX.LT.MAXLVL) LMCMAX=MAXLVL
C     IF(.NOT.MC1) GO TO 344
C     IF(IC.EQ.ITYPE) MC1=.FALSE.
C 344 CONTINUE
C****
C**** PROCESS OF DOWNDRAFTING
C****
      IF(ETADN.GT.1.E-10) THEN
      CONSUM=0.
      DO 347 L=LMIN,LDRAFT
  347 CONSUM=CONSUM+COND(L)
      TNX=SMDN*PLK(LMIN)/DDRAFT
      QNX=QMDN/DDRAFT
      LHX=LHE
      IF(TPSAV(LMIN).LT.TF) LHX=LHS
      SLH=LHX*BYSHA
      QSATC=QSAT(TNX,LHX,PL(LMIN))
      DQ=(QSATC-QNX)/(1.+SLH*LHX*BXCONS*QSATC/(TNX*TNX))
      DQRAT=DQ*DDRAFT/(CONSUM+1.E-20)
      DO 346 L=LDRAFT,LMIN,-1
C     TNX=SMDN*PLK(L)/DDRAFT
C     QNX=QMDN/DDRAFT
      LHX=LHE
      IF(TPSAV(L).LT.TF) LHX=LHS
      SLH=LHX*BYSHA
C     QSATC=QSAT(TNX,LHX,PL(L))
C     DQ=(QSATC-QNX)/(1.+SLH*LHX*BXCONS*QSATC/(TNX*TNX))
C     IF(DQ.LT.0.) DQ=0.
C     DQEVP=DQ*DDRAFT
      DQEVP=DQRAT*COND(L)
      IF(DQEVP.GT.COND(L)) DQEVP=COND(L)
      FSEVP = 0
      IF (ABS(PLK(L)*SMDN).gt.1d-20) FSEVP = SLH*DQEVP/(PLK(L)*SMDN)
      SMDN=SMDN-SLH*DQEVP/PLK(L)
       SXMDN= SXMDN*(1.-FSEVP)
       SYMDN= SYMDN*(1.-FSEVP)
      SXXMDN=SXXMDN*(1.-FSEVP)
      SYYMDN=SYYMDN*(1.-FSEVP)
      SXYMDN=SXYMDN*(1.-FSEVP)
      QMDN=QMDN+DQEVP
      COND(L)=COND(L)-DQEVP
      TAUMCL(L)=TAUMCL(L)-DQEVP
      CDHEAT(L)=CDHEAT(L)-DQEVP*SLH
      EVPSUM=EVPSUM+DQEVP*SLH
c         TMIX=SMDN*PLK(L)/DDRAFT
c         QMIX=QMDN/DDRAFT
c         HMIX=SHA*TMIX+LHX*QMIX
c         TENV=SM1(L)*PLK(L)*BYAM(L)
c         QENV=QM1(L)*BYAM(L)
c         HENV=SHA*TENV+LHX*QENV
c         HSENV=SHA*TENV+LHX*QSAT(TENV,LHX,PL(L))
C     IF(I.EQ.35.AND.J.EQ.13) WRITE (6,399)
C    *  L,TMIX,QMIX,HMIX,TENV,QENV,HENV,HSENV
c  399 FORMAT(1X,'L TMIX QMIX HMIX TENV QENV HENV HSENV=',
c     *  I5,7E12.4)
  346 CONTINUE
      DSM(LMIN)=DSM(LMIN)+SMDN
       DSXM(LMIN)= DSXM(LMIN) +  SXMDN
       DSYM(LMIN)= DSYM(LMIN) +  SYMDN
      DSXXM(LMIN)=DSXXM(LMIN) + SXXMDN
      DSYYM(LMIN)=DSYYM(LMIN) + SYYMDN
      DSXYM(LMIN)=DSXYM(LMIN) + SXYMDN
      DQM(LMIN)=DQM(LMIN)+QMDN
       DQXM(LMIN)= DQXM(LMIN) +  QXMDN
       DQYM(LMIN)= DQYM(LMIN) +  QYMDN
      DQXXM(LMIN)=DQXXM(LMIN) + QXXMDN
      DQYYM(LMIN)=DQYYM(LMIN) + QYYMDN
      DQXYM(LMIN)=DQXYM(LMIN) + QXYMDN
      DO K=1,KMAX !vref
      DUM(K,LMIN)=DUM(K,LMIN)+UMDN(K) !vref
      DVM(K,LMIN)=DVM(K,LMIN)+VMDN(K) !vref
      ENDDO !vref
      DM(LMIN)=DM(LMIN)+DDRAFT
      END IF
C****
C**** SUBSIDENCE AND MIXING
C****
C**** Calculate vertical mass fluxes (Note CM for subsidence is defined
C**** in opposite sense than normal (positive is down))
      DO L=0,LMIN-1
        CM(L) = 0.
      END DO
      DO L=LMIN,LMAX
        CM(L) = CM(L-1) - DM(L) - DMR(L)
        SMT(L)=SM(L)    ! Save profiles for diagnostics
        QMT(L)=QM(L)
      END DO
      DO L=LMAX+1,LM
        CM(L) = 0.
      END DO
C**** simple upwind scheme for momentum
      ALPHA=0.
      DO 380 L=LMIN,LMAX
      CLDM=CCM(L)
      IF(L.LT.LDRAFT.AND.ETADN.GT.1.E-10) CLDM=CCM(L)-DDRAFT
      IF(MC1) VSUBL(L)=100.*CLDM*RGAS*TL(L)/(PL(L)*GRAV*DTCNDS)
      BETA=CLDM*BYAM(L+1)
c         FCDH=0.
c         IF(L.EQ.LMAX) FCDH=CDHSUM-(CDHSUM-CDHDRT)*.5*ETADN+CDHM
C***     IF(L.EQ.LDEP) FCDH=FCDH+CDHM
c         FCDH1=0.
c         IF(L.EQ.LMIN) FCDH1=(CDHSUM-CDHDRT)*.5*ETADN-EVPSUM
c         AJ8(L)=AJ8(L)+CCM(L)
c       AJ13(L)=AJ13(L)+PLK(L)*(-ALPHA*SM(L)+BETA*SM(L+1)+DSM(L))
c   *                  -FCDH-FCDH1
c       AJ51(L)=AJ51(L)+SLHE*(-ALPHA*QM(L)+BETA*QM(L+1)+DQM(L)+
c   *           COND(L))
c       AJ57(L)=AJ57(L)+SLHE*(-ALPHA*QM(L)+BETA*QM(L+1)+DQM(L))
c     SM(L)=SM(L)*(1.-ALPHA)+BETA*SM(L+1)+DSM(L)
c     QM(L)=QM(L)*(1.-ALPHA)+BETA*QM(L+1)+DQM(L)
      DO K=1,KMAX !vref
       UM(K,L)=
     *      UM(K,L)+RA(K)*(-ALPHA*UM(K,L)+BETA*UM(K,L+1)+DUM(K,L)) !vref
       VM(K,L)=
     *      VM(K,L)+RA(K)*(-ALPHA*VM(K,L)+BETA*VM(K,L+1)+DVM(K,L)) !vref
      ENDDO !vref
  380 ALPHA=BETA
C**** Subsidence uses Quadratic Upstream Scheme for QM and SM
      DO L = LMIN,LMAX
          ML(L) = AIRM(L) +   DMR(L)
          SM(L) =   SM(L) +  DSMR(L)
         SXM(L) =  SXM(L) + DSXMR(L)
         SYM(L) =  SYM(L) + DSYMR(L)
        SXXM(L) = SXXM(L) +DSXXMR(L)
        SXYM(L) = SXYM(L) +DSXYMR(L)
        SYYM(L) = SYYM(L) +DSYYMR(L)
         SZM(L) =  SZM(L) + DSZMR(L)
        SYZM(L) = SYZM(L) +DSYZMR(L)
        SZXM(L) = SZXM(L) +DSZXMR(L)
        SZZM(L) = SZZM(L) +DSZZMR(L)
      END DO
      CALL SUBSID(SM,SXM,SYM,SZM,SXXM,SYYM,SZZM,SXYM,SYZM,SZXM,
     *     ML,.FALSE.,CM,LMIN,LMAX,-1)
      DO L = LMIN,LMAX
          SM(L) =   SM(L) +   DSM(L)
         SXM(L) =  SXM(L) +  DSXM(L)
         SYM(L) =  SYM(L) +  DSYM(L)
        SXXM(L) = SXXM(L) + DSXXM(L)
        SXYM(L) = SXYM(L) + DSXYM(L)
        SYYM(L) = SYYM(L) + DSYYM(L)
         SZM(L) =  SZM(L) +  DSZM(L)
        SYZM(L) = SYZM(L) + DSYZM(L)
        SZXM(L) = SZXM(L) + DSZXM(L)
        SZZM(L) = SZZM(L) + DSZZM(L)
          ML(L) = AIRM(L) +   DMR(L)
          QM(L) =   QM(L) +  DQMR(L)
         QXM(L) =  QXM(L) + DQXMR(L)
         QYM(L) =  QYM(L) + DQYMR(L)
        QXXM(L) = QXXM(L) +DQXXMR(L)
        QXYM(L) = QXYM(L) +DQXYMR(L)
        QYYM(L) = QYYM(L) +DQYYMR(L)
         QZM(L) =  QZM(L) + DQZMR(L)
        QYZM(L) = QYZM(L) +DQYZMR(L)
        QZXM(L) = QZXM(L) +DQZXMR(L)
        QZZM(L) = QZZM(L) +DQZZMR(L)
      END DO
      CALL SUBSID(QM,QXM,QYM,QZM,QXXM,QYYM,QZZM,QXYM,QYZM,QZXM,
     *     ML,.TRUE.,CM,LMIN,LMAX,0)
      DO L = LMIN,LMAX
          QM(L) =   QM(L) +   DQM(L)
         QXM(L) =  QXM(L) +  DQXM(L)
         QYM(L) =  QYM(L) +  DQYM(L)
        QXXM(L) = QXXM(L) + DQXXM(L)
        QXYM(L) = QXYM(L) + DQXYM(L)
        QYYM(L) = QYYM(L) + DQYYM(L)
         QZM(L) =  QZM(L) +  DQZM(L)
        QYZM(L) = QYZM(L) + DQYZM(L)
        QZXM(L) = QZXM(L) + DQZXM(L)
        QZZM(L) = QZZM(L) + DQZZM(L)
      END DO
C**** diagnostics
      DO L=LMIN,LMAX
        FCDH=0.
        IF(L.EQ.LMAX) FCDH=CDHSUM-(CDHSUM-CDHDRT)*.5*ETADN+CDHM
        FCDH1=0.
        IF(L.EQ.LMIN) FCDH1=(CDHSUM-CDHDRT)*.5*ETADN-EVPSUM
        AJ8(L)=AJ8(L)+CCM(L)
        AJ13(L)=AJ13(L)+PLK(L)*(SM(L)-SMT(L))-FCDH-FCDH1
        AJ51(L)=AJ51(L)+SLHE*(QM(L)-QMT(L)+COND(L))
        AJ57(L)=AJ57(L)+SLHE*(QM(L)-QMT(L))
      END DO
c      SUMOLD=0.
c      SUMNEW=0.
c      SUMDP=0.
c      DO 382 L=LMIN,LMAX
c      SUMDP=SUMDP+AIRM(L)
c      SUMOLD=SUMOLD+SM1(L)*PLK(L)
c  382 SUMNEW=SUMNEW+SM(L)*PLK(L)
C     DIFSUM=(SUMNEW-SUMOLD)-(CDHSUM+CDHM-EVPSUM)
C     DO 383 L=LMIN,LMAX
C        AJ13(L)=AJ13(L)-DIFSUM/SUMDP
C 383 SM(L)=SM(L)-DIFSUM/SUMDP/PLK(L)
      DO 381 L=1,LM
      SM1(L)=SM(L)
  381 QM1(L)=QM(L)
C****
C**** REEVAPORATION AND PRECIPITATION
C****
      LEVAP=LMAX-1
      IF(MC1.AND.PLE(LMIN)-PLE(LMAX+1).GE.450.) LEVAP=LMIN+2
      IF(LMAX-LEVAP.GT.1) THEN
      DO 488 L=LMAX,LEVAP+2,-1
C        AJ52(L)=AJ52(L)+CDHEAT(L)
      SVWMXL(L)=0.5000000*COND(L)*BYAM(L)
  488 COND(L)=COND(L)*0.5000000
      END IF
      LEVAP=LMAX-1
C     IF(LMAX-LMIN.LE.2) GO TO 700
      PRCP=COND(LEVAP+1)
      PRHEAT=CDHEAT(LEVAP+1)
C     FEVAP=.5*FPLUME
C     IF(FEVAP.GT.1.) FEVAP=1.
         AJ50(LMAX)=AJ50(LMAX)+CDHSUM-(CDHSUM-CDHDRT)*.5*ETADN+CDHM
C        IF(LMAX.EQ.LDEP) AJ50(LMAX)=AJ50(LMAX)+CDHM
C        AJ52(LEVAP+1)=AJ52(LEVAP+1)+CDHEAT(LEVAP+1)
      DO 540 L=LMAX-1,1,-1
      IF(L.LE.LEVAP.AND.PRCP.LE.0.) GO TO 530
      FCLOUD=CCM(L)*BYAM(L+1)
      IF(PLE(LMIN)-PLE(L+2).GE.450.) FCLOUD=5.*CCM(L)*BYAM(L+1)
      IF(L.LT.LMIN) FCLOUD=CCM(LMIN)*BYAM(LMIN+1)
      IF(PLE(LMIN)-PLE(LMAX+1).LT.450.) THEN
        IF(L.EQ.LMAX-1) FCLOUD=3.*CCM(L)*BYAM(L+1)
        IF(L.LT.LMIN) FCLOUD=0.
      ENDIF
      IF(FCLOUD.GT.1.) FCLOUD=1.
      FEVAP=.5*CCM(L)*BYAM(L+1)
      IF(L.LT.LMIN) FEVAP=.5*CCM(LMIN)*BYAM(LMIN+1)
      IF(FEVAP.GT..5) FEVAP=.5
C     IF(LMAX-LMIN.LE.2) FEVAP=1.
      CLDMCL(L+1)=CLDMCL(L+1)+FCLOUD
      CLDREF=CLDMCL(L+1)
      IF(PLE(LMAX+1).GT.700..AND.CLDREF.GT.CLDSLWIJ)
     *  CLDSLWIJ=CLDREF
      IF(PLE(LMIN)-PLE(LMAX+1).GE.450..AND.CLDREF.GT.CLDDEPIJ)
     *  CLDDEPIJ=CLDREF
C**** REEVAPORATE ALL PRECIPITATION FROM ABOVE
C     EVAP=PRCP
C     PRCP=0.
C**** FORWARD STEP COMPUTES HUMIDITY CHANGE BY RECONDENSATION
C**** Q = Q + F(TOLD,PRHEAT,QOLD+EVAP)
      IF(L.GT.LEVAP) GO TO 540
      PRECNVL(L+1)=PRECNVL(L+1)+PRCP*BYGRAV
      MCLOUD=0.
      IF(L.LE.LMIN) MCLOUD=2.*FEVAP*AIRM(L)
      TOLD=SMOLD(L)*PLK(L)*BYAM(L)
      TOLD1=SMOLD(L+1)*PLK(L+1)*BYAM(L+1)
      HEAT1=0.
      IF(L.EQ.LFRZ.OR.(L.LE.LMIN.AND.TOLD.GE.TF.AND.TOLD1.LT.TF))
     *  HEAT1=LHM*PRCP*BYSHA
C     TN=TOLD-PRHEAT/MCLOUD
C     QN=QMOLD(L)*BYAM(L)+EVAP/MCLOUD
C     LHX=LHE
C     IF(TOLD.LT.TF) LHX=LHS
C     SLH=LHX*BYSHA
C     QSATC=QSAT(TN,LHX,PL(L))
C     IF(QN-QSATC.LE.0.) GO TO 520
      TNX=TOLD
      QNX=QMOLD(L)*BYAM(L)
      LHX=LHE
      IF(TNX.LT.TF) LHX=LHS
      IF(L.GT.LMIN.AND.TPSAV(L).GE.TF) LHX=LHE
      SLH=LHX*BYSHA
      DQSUM=0.
      DO 510 N=1,3
      QSATC=QSAT(TNX,LHX,PL(L))
      DQ=(QSATC-QNX)/(1.+SLH*LHX*BXCONS*QSATC/(TNX*TNX))
      TNX=TNX-SLH*DQ
      QNX=QNX+DQ
  510 DQSUM=DQSUM+DQ*MCLOUD
      IF(DQSUM.LT.0.) DQSUM=0.
      IF(DQSUM.GT.PRCP) DQSUM=PRCP
      PRCP=PRCP-DQSUM
C     IF(PRCP.GT.EVAP) PRCP=EVAP
C**** UPDATE TEMPERATURE AND HUMIDITY DUE TO NET REVAPORATION IN CLOUDS
      FSSUM = 0
      IF (ABS(PLK(L)*SM(L)).gt.1d-20) FSSUM = (SLH*DQSUM+HEAT1)/
     *     (PLK(L)*SM(L))
      SM(L)=SM(L)-(SLH*DQSUM+HEAT1)/PLK(L)
       SXM(L) =  SXM(L)*(1.-FSSUM)
       SYM(L) =  SYM(L)*(1.-FSSUM)
       SZM(L) =  SZM(L)*(1.-FSSUM)
      SXXM(L) = SXXM(L)*(1.-FSSUM)
      SYYM(L) = SYYM(L)*(1.-FSSUM)
      SXYM(L) = SXYM(L)*(1.-FSSUM)
      SYZM(L) = SYZM(L)*(1.-FSSUM)
      SZXM(L) = SZXM(L)*(1.-FSSUM)
      SZZM(L) = SZZM(L)*(1.-FSSUM)
      QM(L)=QM(L)+DQSUM
         FCDH1=0.
C        IF(L.EQ.LDEP) FCDH1=FCDH1+CDHM
         IF(L.EQ.LMIN) FCDH1=(CDHSUM-CDHDRT)*.5*ETADN-EVPSUM
         AJ50(L)=AJ50(L)-SLH*DQSUM+FCDH1-HEAT1
         AJ52(L)=AJ52(L)-SLH*DQSUM
C**** ADD PRECIPITATION AND LATENT HEAT BELOW
  530 PRHEAT=CDHEAT(L)+SLH*PRCP
      PRCP=PRCP+COND(L)
  540 CONTINUE
C****
      IF(PRCP.GT.0.) CLDMCL(1)=CLDMCL(1)+CCM(LMIN)*BYAM(LMIN+1)
      PRCPMC=PRCPMC+PRCP
C****
C**** END OF LOOP OVER CLOUD TYPES
C****
  570 CONTINUE
C****
C**** END OF OUTER LOOP OVER CLOUD BASE
C****
  600 CONTINUE
      IF(LMCMIN.GT.0) THEN
C**** ADJUSTMENT TO CONSERVE CP*T
      SUMAJ=0.
      SUMDP=0.
      DO 605 L=LMCMIN,LMCMAX
      SUMDP=SUMDP+AIRM(L)
      SUMAJ=SUMAJ+AJ13(L)
  605 CONTINUE
      DO 606 L=LMCMIN,LMCMAX
         AJ13(L)=AJ13(L)-SUMAJ*AIRM(L)/SUMDP
  606 SM(L)=SM(L)-SUMAJ*AIRM(L)/(SUMDP*PLK(L))
      END IF
C**** CALCULATE OPTICAL THICKNESS
      WCONST=1.d-3*(WMU*(1.-PEARTH)+WMUL*PEARTH)
      WMSUM=0.
      DO L=1,LMCMAX
         TL(L)=(SM(L)*BYAM(L))*PLK(L)
         TEMWM=(TAUMCL(L)-SVWMXL(L)*AIRM(L))*1.d2*BYGRAV
         IF(TL(L).GE.TF) WMSUM=WMSUM+TEMWM
         IF (CLDMCL(L).GT.0.) TAUMCL(L)=AIRM(L)*.08d0
         IF(PLE(LMCMIN)-PLE(LMCMAX+1).LT.450..AND.(CLDMCL(L).GT.0.))THEN
            IF(L.EQ.LMCMAX) TAUMCL(L)=AIRM(L)*.02d0
         ENDIF
         IF(PLE(LMCMIN)-PLE(LMCMAX+1).GE.450..AND.(CLDMCL(L).GT.0.))THEN
            IF(L.EQ.LMCMIN) TAUMCL(L)=AIRM(L)*.02d0
         ENDIF
         IF(SVLATL(L).EQ.0.) THEN
            SVLATL(L)=LHE
            IF(SVTP(L).LT.TF) SVLATL(L)=LHS
         ENDIF
         IF(SVWMXL(L).GT.0.) THEN
            FCLD=CLDMCL(L)+1.E-20
            TEM=1.d5*SVWMXL(L)*AIRM(L)*BYGRAV
            WTEM=1.d5*SVWMXL(L)*PL(L)/(FCLD*TL(L)*RGAS)
            IF(SVLATL(L).EQ.LHE.AND.SVWMXL(L)/FCLD.GE.WCONST)
     *           WTEM=1.d5*WCONST*PL(L)/(TL(L)*RGAS)
            IF(SVLATL(L).EQ.LHS.AND.SVWMXL(L)/FCLD.GE.WMUI*1.d-3)
     *           WTEM=1.E5*WMUI*1.d-3*PL(L)/(TL(L)*RGAS)
            IF(WTEM.LT.1.d-10) WTEM=1.d-10
            IF(SVLATL(L).EQ.LHE) RCLD=(10.*(1.-PEARTH)+7.0*PEARTH)*
     *           (WTEM*4.)**BY3
            IF(SVLATL(L).EQ.LHS) RCLD=25.0*(WTEM/4.2d-3)**BY3
            RCLDE=RCLD/BYBR   !  effective droplet radius in anvil
            CSIZEL(L)=RCLDE   !  effective droplet radius in anvil
            TAUMCL(L)=1.5*TEM/(FCLD*RCLDE+1.E-20)
            IF(TAUMCL(L).GT.100.) TAUMCL(L)=100.
         END IF
      END DO

      RETURN
      END SUBROUTINE MSTCNV

      SUBROUTINE LSCOND(I0,J0)
!@sum  CONDSE_LOC column physics of large scale condensation
!@auth M.S.Yao/T. Del Genio (modularisation by Gavin Schmidt)
!@ver  1.0 (taken from CB265)
!@calls CTMIX,QSAT,THBAR
      IMPLICIT NONE

!@var I0,J0 grid point for diagnostic purposes
      INTEGER, INTENT(IN) :: I0,J0
      REAL*8 LHX,LHXUP

      REAL*8, PARAMETER :: CM00=1.d-4
      REAL*8, PARAMETER :: WM0=.5d-3
      REAL*8, PARAMETER :: EPS=.622d0

      REAL*8, DIMENSION(IM) :: UMO1,UMO2,UMN1,UMN2 !@var
      REAL*8, DIMENSION(IM) :: VMO1,VMO2,VMN1,VMN2 !@var
!@var Miscellaneous vertical arrays
      REAL*8, DIMENSION(LM) ::
     *     QSATL,RHF,RH1,ATH,SQ,ER,QHEAT,
     *     CAREA,PREP,RH00,EC,WMXM
      REAL*8, DIMENSION(LM+1) :: PREBAR,PREICE

      REAL*8 Q1,AIRMR,BETA,BMAX
     *     ,CBF,CBFC0,CK,CKIJ,CK1,CK2,CKM,CKR,CM,CM0,CM1,DFX,DQ,DQSDT
     *     ,DQSUM,DQUP,DRHDT,DSE,DSEC,DSEDIF,DWDT,DWDT1,DWM,ECRATE,EXPST
     *     ,FCLD,FMASS,FMIX,FPLUME,FPMAX,FQTOW,FRAT,FUNI,FUNIL,FUNIO
     *     ,HCHANG,HDEP,HPHASE,OLDLAT,OLDLHX,PFR,PMI,PML
     *     ,PRATIO,QCONV,QHEATC,QLT1,QLT2,QMN1,QMN2,QMO1,QMO2,QNEW,QNEWU
     *     ,QOLD,QOLDU,QSATC,QSATE,RANDNO,RCLDE,RHI,RHN,RHO,RHT1,RHW
     *     ,SEDGE,SIGK,SLH,SMN1,SMN2,SMO1,SMO2,TEM,TEMP,TEVAP,THT1,THT2
     *     ,TLT1,TNEW,TNEWU,TOLD,TOLDU,TOLDUP,VDEF,WCONST,WMN1,WMN2
     *     ,WMNEW,WMO1,WMO2,WMT1,WMT2,WMX1,WTEM,VVEL,XY,RCLD,FCOND
      INTEGER LN,ITER
      LOGICAL BANDF

      INTEGER K,L,N  !@var K,L,N loop variables

      REAL*8 THBAR
C****
C**** LARGE-SCALE CLOUDS AND PRECIPITATION
C**** THE LIQUID WATER CONTENT IS PREDICTED
C****
      PRCPSS=0.
      HCNDSS=0.
      CKIJ=1.
C**** initialise vertical arrays
      ER=0.
      EC=0.
      PREP=0.
      PREBAR=0.
      QHEAT=0.
      CLDSSL=0
      TAUSSL=0
      DO L=1,LM
         CAREA(L)=1.-CLDSAVL(L)
         IF(WMX(L).LE.0.) CAREA(L)=1.
C     CAREA(L)=(1.-RH(L))/(1.-RHF(L)*0.999+1.E-20)
C     IF(CAREA(L).GT.1.) CAREA(L)=1.
C     IF(RH(L).GT.1.) CAREA(L)=0.
      END DO
      DQUP=0.
      LHXUP=LHE
      TOLDUP=TL(LM)
      PREICE(LM+1)=0.
      WCONST=WMU*(1.-PEARTH)+WMUL*PEARTH
         AJ11=0.
         AJ55=0.
C****
C**** MAIN L LOOP FOR LARGE-SCALE CONDENSATION, PRECIPITATION AND CLOUDS
C****
      DO 304 L=LM,1,-1
      TOLD=TL(L)
      QOLD=QL(L)
      OLDLHX=SVLHXL(L)
      OLDLAT=SVLATL(L)
C**** COMPUTE VERTICAL VELOCITY IN CM/S
      TEMP=100.*RGAS*TL(L)/(PL(L)*GRAV)
      IF(L.EQ.1) VVEL=-SDL(L+1)*TEMP
      IF(L.EQ.LM) VVEL=-SDL(L)*TEMP
      IF(L.GT.1.AND.L.LT.LM)
     *     VVEL=-.5*(SDL(L)+SDL(L+1))*TEMP
C**** COMPUTE THE LIMITING AUTOCONVERSION RATE FOR CLOUD WATER CONTENT
      CM0=CM00
      VDEF=VVEL-VSUBL(L)
      IF(VDEF.GT.0.) CM0=CM00*10.**(-VDEF)
      FCLD=1.-CAREA(L)+1.E-20
C**** COMPUTE THE PROBABILITY OF ICE FORMATION, FUNI, AND
C**** THE PROBABLITY OF GLACIATION OF SUPER-COOLED WATER, PFR
C**** DETERMINE THE PHASE MOISTURE CONDENSES TO
C**** DETERMINE THE POSSIBILITY OF B-F PROCESS
      BANDF=.FALSE.
      LHX= LHE
      PMI=PREICE(L+1)*DTCNDS
      PML=WMX(L)*AIRM(L)*BYGRAV
      PRATIO=PMI/(PML+1.E-20)
      IF(PRATIO.GT.10.) PRATIO=10.
      CBF=1.+1.*EXP(-((TL(L)-258.16d0)/10.)**2)
      CBFC0=.5*CM0*CBF*DTCNDS
      PFR=(1.-EXP(-(PRATIO*PRATIO)))*(1.-EXP(-(CBFC0*CBFC0)))
      FUNIO=1.-EXP(-((TL(L)-269.16d0)/15.)**2)
      FUNIL=1.-EXP(-((TL(L)-263.16d0)/15.)**2)
      IF(TL(L).GT.269.16) FUNIO=0.
      IF(TL(L).GT.263.16) FUNIL=0.
      FUNI=FUNIO*(1.-PEARTH)+FUNIL*PEARTH
      IF(TL(L).LE.TI) FUNI=1.
      IF(TL(L).LT.TI) LHX=LHS
      IF(TL(L).GE.TI.AND.RANDU(XY).LT.FUNI) LHX=LHS
      IF((OLDLHX.EQ.LHS.OR.OLDLAT.EQ.LHS).AND.TL(L).LT.TF) THEN
        IF(LHX.EQ.LHE) BANDF=.TRUE.
        LHX=LHS
      ENDIF
      IF(L.LT.LM) THEN
      RANDNO=RANDU(XY)
      IF(PFR.GT.RANDNO.AND.TL(L).LT.TF) THEN
        IF(LHX.EQ.LHE) BANDF=.TRUE.
        LHX=LHS
      ENDIF
      IF(LHXUP.EQ.LHE) LHX=LHE
      IF(LHXUP.EQ.LHE) BANDF=.FALSE.
      END IF
C**** COMPUTE RELATIVE HUMIDITY
      QSATL(L)=QSAT(TL(L),LHX,PL(L))
      RH1(L)=QL(L)/QSATL(L)
      IF(LHX.EQ.LHS) THEN
      QSATE=QSAT(TL(L),LHE,PL(L))
      RHW=.00536d0*TL(L)-.276d0
      RH1(L)=QL(L)/QSATE
      IF(TL(L).LT.238.16) RH1(L)=QL(L)/(QSATE*RHW)
      END IF
C**** PHASE CHANGE OF CLOUD WATER CONTENT
      HCHANG=0.
      IF(LHX.EQ.LHS) THEN
        IF(OLDLHX.EQ.LHE) HCHANG=WML(L)*LHM
        IF(OLDLHX.EQ.LHE.OR.OLDLAT.EQ.LHE) BANDF=.TRUE.
      END IF
      IF(OLDLHX.EQ.LHS.AND.LHX.EQ.LHE) HCHANG=-WML(L)*LHM
      IF(OLDLAT.EQ.LHE.AND.LHX.EQ.LHS) HCHANG=HCHANG+SVWMXL(L)*LHM
      IF(OLDLAT.EQ.LHS.AND.LHX.EQ.LHE) HCHANG=HCHANG-SVWMXL(L)*LHM
      SVLHXL(L)=LHX
      TL(L)=TL(L)+HCHANG/SHA
      TH(L)=TL(L)/PLK(L)
      ATH(L)=(TH(L)-TTOLDL(L))*BYDTCN
C**** COMPUTE RH IN THE CLOUD-FREE AREA, RHF
      RHI=QL(L)/QSAT(TL(L),LHS,PL(L))
      RH00(L)=U00wtr
      IF(LHX.EQ.LHS) RH00(L)=U00ice
      IF(L.EQ.1) THEN
        HDEP=AIRM(L)*TL(L)*RGAS/(1000.*GRAV*PL(L))
        RH00(L)=1.-9.8d0*LHE*HDEP/(RVAP*TS*TS)
        IF(RH00(L).LT.0.) RH00(L)=0.
      ENDIF
      IF(L.GT.1.AND.PLE(L+1).GT.930.) THEN
        HDEP=0.
        DO 216 LN=L,1,-1
  216   HDEP=HDEP+AIRM(LN)*TL(LN)*RGAS/(1000.*GRAV*PL(LN))
        RH00(L)=1.-9.8d0*LHE*HDEP/(RVAP*TS*TS)
        IF(RH00(L).LT.0.) RH00(L)=0.
      ENDIF
C     IF(L.LE.LPBL) RH00(L)=.75
      IF(RH00(L).GT.1.) RH00(L)=1.
      RHF(L)=RH00(L)+(1.-CAREA(L))*(1.-RH00(L))
      IF(WMX(L).GT.0.) THEN
C**** COMPUTE THE AUTOCONVERSION RATE OF CLOUD WATER TO PRECIPITATION
      RHO=1.E5*PL(L)/(RGAS*TL(L))
      TEM=RHO*WMX(L)/(WCONST*FCLD+1.E-20)
      IF(LHX.EQ.LHS ) TEM=RHO*WMX(L)/(WMUI*FCLD+1.E-20)
      TEM=TEM*TEM
      IF(TEM.GT.10.) TEM=10.
      CM1=CM0
      IF(BANDF) CM1=CM0*CBF
      IF(LHX.EQ.LHS) CM1=CM0
      CM=CM1*(1.-1./EXP(TEM*TEM))+1.*100.*(PREBAR(L+1)+
     *   PRECNVL(L+1)*BYDTCN)
      IF(CM.GT.BYDTCN) CM=BYDTCN
      PREP(L)=WMX(L)*CM
      END IF
C**** FORM CLOUDS ONLY IF RH GT RH00
  219 IF(RH1(L).LT.RH00(L)) GO TO 220
C**** COMPUTE THE CONVERGENCE OF AVAILABLE LATENT HEAT
      SQ(L)=EPS*LHX*LHX*QSATL(L)/(RGAS*SHA*TL(L)*TL(L))
      TEM=-LHX*DPDT(L)/PL(L)
      QCONV=LHX*AQ(L)-RH(L)*SQ(L)*SHA*PLK(L)*ATH(L)
     *  -TEM*QSATL(L)*RH(L)
      IF(QCONV.LE.0.0.AND.WMX(L).LE.0.) GO TO 220
C**** COMPUTE EVAPORATION OF RAIN WATER, ER
      RHN=RHF(L)
      IF(RHF(L).GT.RH(L)) RHN=RH(L)
C     QCONV0=LHX*AQ(L)-RHN*SQ(L)*SHA*PLK(L)*ATH(L)
C    *  -TEM*QSATL(L)*RHN
      IF(WMX(L).GT.0.) ER(L)=(1.-RHN)*LHX*PREBAR(L+1)*GRAV*BYAM(L)
      IF(WMX(L).LE.0.) ER(L)=(1.-RH(L))*LHX*PREBAR(L+1)*GRAV*BYAM(L)
      IF(WMX(L).LE.0..AND.PREICE(L+1).GT.0..AND.TL(L).LT.TF)
     *  ER(L)=(1.-RHI)*LHX*PREBAR(L+1)*GRAV*BYAM(L)
      IF(ER(L).LT.0.) ER(L)=0.
C**** COMPUTATION OF CLOUD WATER EVAPORATION
      IF (CAREA(L).GT.0.) THEN
      WTEM=1d5*WMX(L)*PL(L)/(FCLD*TL(L)*RGAS+1.E-20)
      IF(LHX.EQ.LHE.AND.WMX(L)/FCLD.GE.WCONST*1.E-3)
     *  WTEM=1d5*WCONST*1d-3*PL(L)/(TL(L)*RGAS)
      IF(LHX.EQ.LHS.AND.WMX(L)/FCLD.GE.WMUI*1.E-3)
     *  WTEM=1d5*WMUI*1d-3*PL(L)/(TL(L)*RGAS)
      IF(WTEM.LT.1.E-10) WTEM=1d-10
      IF(LHX.EQ.LHE) RCLD=1d-6*(10.*(1.-PEARTH)+7.0*PEARTH)*
     *  (WTEM*4.)**BY3
      IF(LHX.EQ.LHS) RCLD=25.d-6*(WTEM/4.2d-3)**BY3
      CK1=1000.*LHX*LHX/(2.4d-2*RVAP*TL(L)*TL(L))
      CK2=1000.*RVAP*TL(L)/(2.4d-3*QSATL(L)*PL(L)/.622d0)
      TEVAP=1000.*(CK1+CK2)*RCLD*RCLD
      WMX1=WMX(L)-PREP(L)*DTCNDS
      ECRATE=(1.-RHF(L))/(TEVAP*FCLD+1.E-20)
      IF(ECRATE.GT.BYDTCN) ECRATE=BYDTCN
      EC(L)=WMX1*ECRATE*LHX
      END IF
C**** COMPUTE NET LATENT HEATING DUE TO STRATIFORM CLOUD PHASE CHANGE,
C**** QHEAT, AND NEW CLOUD WATER CONTENT, WMNEW
      DRHDT=2.*CAREA(L)*CAREA(L)*(1.-RH00(L))*(QCONV+ER(L)+EC(L))/LHX/
     *  (WMX(L)/(FCLD+1.E-20)+2.*CAREA(L)*QSATL(L)*(1.-RH00(L))+1.E-20)
      IF(ER(L).EQ.0..AND.EC(L).EQ.0..AND.WMX(L).LE.0.) DRHDT=0.
C     IF(RH1(L).GT.1.) DRHDT=0.
      QHEAT(L)=(QCONV-LHX*DRHDT*QSATL(L))/(1.+RH(L)*SQ(L))
      DWDT=QHEAT(L)/LHX-PREP(L)+CAREA(L)*ER(L)/LHX
      WMNEW =WMX(L)+DWDT*DTCNDS
      IF(WMNEW.LT.0.) THEN
      WMNEW=0.
      QHEAT(L)=(-WMX(L)*BYDTCN+PREP(L))*LHX-CAREA(L)*ER(L)
      END IF
      GO TO 230
C**** UNFAVORABLE CONDITIONS FOR CLOUDS TO EXIT, PRECIP OUT CLOUD WATER
  220 Q1=0.
      IF(WMX(L).GT.0.) PREP(L)=WMX(L)*BYDTCN
      ER(L)=(1.-RH(L))*LHX*PREBAR(L+1)*GRAV*BYAM(L)
      IF(PREICE(L+1).GT.0..AND.TL(L).LT.TF)
     *  ER(L)=(1.-RHI)*LHX*PREBAR(L+1)*GRAV*BYAM(L)
      IF(ER(L).LT.0.) ER(L)=0.
      QHEAT(L)=-CAREA(L)*ER(L)+Q1
      WMNEW=0.
  230 CONTINUE
C**** PHASE CHANGE OF PRECIPITATION, FROM ICE TO WATER
      HPHASE=0.
      IF(L.LT.LM.AND.TL(L).GT.TF)
     *  HPHASE=LHM*PREICE(L+1)*GRAV*BYAM(L)
C**** COMPUTE THE PRECIP AMOUNT ENTERING THE LAYER TOP
      IF(TL(L).GT.TF) PREICE(L+1)=0.
      PREICE(L)=PREICE(L+1)-AIRM(L)*ER(L)*CAREA(L)*PREICE(L+1)/
     *          (GRAV*LHX*PREBAR(L+1)+1.E-20)
      IF(LHX.EQ.LHS) PREICE(L)=PREICE(L)+AIRM(L)*PREP(L)*BYGRAV
      PREBAR(L)=PREBAR(L+1)+
     *          AIRM(L)*(PREP(L)-ER(L)*CAREA(L)/LHX)*BYGRAV
C**** UPDATE NEW TEMPERATURE AND SPECIFIC HUMIDITY
      QNEW =QL(L)-DTCNDS*QHEAT(L)/LHX
      IF(QNEW.LT.0.) THEN
      QNEW=0.
      QHEAT(L)=QL(L)*LHX*BYDTCN
      DWDT1=QHEAT(L)/LHX-PREP(L)+CAREA(L)*ER(L)/LHX
      WMNEW=WMX(L)+DWDT1*DTCNDS
C**** IF WMNEW .LT. 0., THE COMPUTATION IS UNSTABLE
      IF(WMNEW.LT.0.) THEN
        WRITE(99,'(F10.0,3I4,A,D14.5,A)')
     *   TAU,I0,J0,L,' CONDSE:H2O<0',WMNEW,' ->0'
        WMNEW=0.
      END IF
      END IF
C**** Only Calculate fractional changes of Q to W
c      FPR=0.
c      IF (WMX(L).gt.1d-20) FPR=PREP(L)*DTCNDS/WMX(L)          ! CLW->P
c      FER=0.
c      IF (PREBAR(L+1).gt.1d-20) FER=CAREA(L)*ER(L)*AIRM(L)/(
c     *     GRAV*LHX*PREBAR(L+1))                              ! P->Q
      FQTOW=0.                                                ! Q->CLW
c      FWTOQ=0.                                                ! CLW->Q
      IF (QHEAT(L)+CAREA(L)*ER(L).gt.0) THEN
        IF (LHX*QL(L)+DTCNDS*CAREA(L)*ER(L).gt.1d-20) FQTOW=(QHEAT(L)
     *       +CAREA(L)*ER(L))*DTCNDS/(LHX*QL(L)+DTCNDS*CAREA(L)*ER(L))
c      ELSE
c        IF (WMX(L)-PREP(L)*DTCNDS.gt.1d-20) FWTOQ=-(QHEAT(L)+CAREA(L)
c     *       *ER(L))*DTCNDS/(LHX*(WMX(L)-PREP(L)*DTCNDS))
      END IF
      QL(L)=QNEW
C**** adjust gradients down if Q decreases
       QXM(L)= QXM(L)*(1.-FQTOW)
       QYM(L)= QYM(L)*(1.-FQTOW)
       QZM(L)= QZM(L)*(1.-FQTOW)
      QXXM(L)=QXXM(L)*(1.-FQTOW)
      QXYM(L)=QXYM(L)*(1.-FQTOW)
      QYYM(L)=QYYM(L)*(1.-FQTOW)
      QYZM(L)=QYZM(L)*(1.-FQTOW)
      QZZM(L)=QZZM(L)*(1.-FQTOW)
      QZXM(L)=QZXM(L)*(1.-FQTOW)
      WMX(L)=WMNEW
      TL(L)=TL(L)+DTCNDS*(QHEAT(L)-HPHASE)/SHA
      TH(L)=TL(L)/PLK(L)
      TNEW=TL(L)
      QSATC=QSAT(TL(L),LHX,PL(L))
      RH(L)=QL(L)/QSATC
C**** CONDENSE MORE MOISTURE IF RELATIVE HUMIDITY .GT. 1
      IF(RH(L).GT.1.) THEN
      SLH=LHX*BYSHA
      DQSUM=0.
      DO 231 N=1,3
      IF(N.NE.1) QSATC=QSAT(TL(L),LHX,PL(L))
      DQ=(QL(L)-QSATC)/(1.+SLH*LHX*BXCONS*QSATC/(TL(L)*TL(L)))
      TL(L)=TL(L)+SLH*DQ
      QL(L)=QL(L)-DQ
  231 DQSUM=DQSUM+DQ
      IF(DQSUM.GT.0.) THEN
      WMX(L)=WMX(L)+DQSUM
      FCOND=DQSUM/QNEW
C**** adjust gradients down if Q decreases
       QXM(L)= QXM(L)*(1.-FCOND)
       QYM(L)= QYM(L)*(1.-FCOND)
       QZM(L)= QZM(L)*(1.-FCOND)
      QXXM(L)=QXXM(L)*(1.-FCOND)
      QXYM(L)=QXYM(L)*(1.-FCOND)
      QYYM(L)=QYYM(L)*(1.-FCOND)
      QYZM(L)=QYZM(L)*(1.-FCOND)
      QZZM(L)=QZZM(L)*(1.-FCOND)
      QZXM(L)=QZXM(L)*(1.-FCOND)
      ELSE
      TL(L)=TNEW
      QL(L)=QNEW
      END IF
      RH(L)=QL(L)/QSAT(TL(L),LHX,PL(L))
      TH(L)=TL(L)/PLK(L)
      TNEW=TL(L)
      END IF
      IF(RH(L).LE.RHF(L)) THEN
C**** PRECIP OUT CLOUD WATER IF RH LESS THAN THE RH OF THE ENVIRONMENT
      PREBAR(L)=PREBAR(L)+WMX(L)*AIRM(L)*BYGRAV*BYDTCN
      WMX(L)=0.
      END IF
C**** COMPUTE THE LARGE-SCALE CLOUD COVER
      IF(RH(L).LE.1.) CAREA(L)=DSQRT((1.-RH(L))/(1.-RH00(L)+1.E-20))
      IF(CAREA(L).GT.1.) CAREA(L)=1.
      IF(RH(L).GT.1.) CAREA(L)=0.
      IF(WMX(L).LE.0.) CAREA(L)=1.
      IF(CAREA(L).LT.0.) CAREA(L)=0.
      CLDSSL(L)=1.-CAREA(L)
      TOLDUP=TOLD
      LHXUP=LHX
C**** ACCUMULATE SOME DIAGNOSTICS
         HCNDSS=HCNDSS+(TNEW-TOLD)*AIRM(L)
  304    AJ11(L)=AJ11(L)+(TNEW-TOLD)*AIRM(L)
C****
C**** CLOUD-TOP ENTRAINMENT INSTABILITY
C****
C     DO 310 L=1,LM
      DO 382 L=LM-1,1,-1
      SM(L)=TH(L)*AIRM(L)
      QM(L)=QL(L)*AIRM(L)
      WMXM(L)=WMX(L)*AIRM(L)
      SM(L+1)=TH(L+1)*AIRM(L+1)
      QM(L+1)=QL(L+1)*AIRM(L+1)
      WMXM(L+1)=WMX(L+1)*AIRM(L+1)
      TOLD=TL(L)
      TOLDU=TL(L+1)
         QOLD=QL(L)
         QOLDU=QL(L+1)
      FCLD=1.-CAREA(L)+1.E-30
      IF(CAREA(L).EQ.1.) GO TO 382
      IF(CAREA(L).LT.1..AND.CAREA(L+1).LT.1.) GO TO 382
      SEDGE=THBAR(TH(L+1),TH(L))
      DSE=(TH(L+1)-SEDGE)*PLK(L+1)+(SEDGE-TH(L))*PLK(L)+
     *  SLHE*(QL(L+1)-QL(L))
      DWM=QL(L+1)-QL(L)+(WMX(L+1)-WMX(L))/FCLD
      DQSDT=DQDTX*QL(L)/(RH(L)*TL(L)*TL(L)+1.E-30)
      BETA=(1.+1.608d0*TL(L)*DQSDT)/(1.+SLHE*DQSDT)
      CKM=(1.+SLHE*DQSDT)*(1.+.392d0*TL(L)/SLHE)/
     *  (2.+(1.+1.608d0*TL(L)/SLHE)*SLHE*DQSDT)
      CKR=TL(L)/(BETA*SLHE)
      CK=DSE/(SLHE*DWM)
      SIGK=0.
      IF(CKR.GT.CKM) GO TO 382
      IF(CK.GT.CKR) SIGK=1d-3*((CK-CKR)/(CKM-CKR+1.E-20))**5.
      EXPST=EXP(-SIGK*DTCNDS)
      IF(L.LE.1) CKIJ=EXPST
      DSEC=DWM*TL(L)/BETA
C     DSEC=.53*SLHE*DWM
C     TIME0=ABS(8./(DSE-DSEC+1.E-30))
C     FPMAX=1.-EXP(-1./TIME0)
C     FPMAX=1.
      IF(CK.LT.CKR) GO TO 382
      FPMAX=1.-EXPST
C     IF(CK.GT.CKM) FPMAX=1.
      IF(FPMAX.LE.0.) GO TO 382
      IF(FPMAX.GT.1.) FPMAX=1.
      IF(DSE.GE.DSEC) GO TO 382
C**** MIXING TO REMOVE CLOUD-TOP ENTRAINMENT INSTABILITY
      AIRMR=(AIRM(L+1)+AIRM(L))*BYAM(L+1)*BYAM(L)
      SMO1=SM(L)
      QMO1=QM(L)
      WMO1=WMXM(L)
      SMO2=SM(L+1)
      QMO2=QM(L+1)
      WMO2=WMXM(L+1)
      DO K=1,KMAX !vref
         UMO1(K)=UM(K,L) !vref
         VMO1(K)=VM(K,L) !vref
         UMO2(K)=UM(K,L+1) !vref
         VMO2(K)=VM(K,L+1) !vref
      ENDDO !vref
      FPLUME=FPMAX
      DFX=FPMAX
      DO 320 ITER=1,9
      DFX=DFX*0.5
      FMIX=FPLUME*FCLD
      FMASS=FMIX*AIRM(L)
      FMASS=MIN(FMASS,(AIRM(L+1)*AIRM(L))/(AIRM(L+1)+AIRM(L)))
      FMIX=FMASS*BYAM(L)
      FRAT=FMASS*BYAM(L+1)
      SMN1=SMO1*(1.-FMIX)+FRAT*SMO2
      QMN1=QMO1*(1.-FMIX)+FRAT*QMO2
      WMN1=WMO1*(1.-FMIX)+FRAT*WMO2
      SMN2=SMO2*(1.-FRAT)+FMIX*SMO1
      QMN2=QMO2*(1.-FRAT)+FMIX*QMO1
      WMN2=WMO2*(1.-FRAT)+FMIX*WMO1
      THT1=SMN1*BYAM(L)
      QLT1=QMN1*BYAM(L)
      TLT1=THT1*PLK(L)
      LHX=SVLHXL(L)
      RHT1=QLT1/(QSAT(TLT1,LHX,PL(L)))
      WMT1=WMN1*BYAM(L)
      THT2=SMN2*BYAM(L+1)
      QLT2=QMN2*BYAM(L+1)
      WMT2=WMN2*BYAM(L+1)
      SEDGE=THBAR(THT2,THT1)
      DSE=(THT2-SEDGE)*PLK(L+1)+(SEDGE-THT1)*PLK(L)+SLHE*(QLT2-QLT1)
      DWM=QLT2-QLT1+(WMT2-WMT1)/FCLD
      DQSDT=DQDTX*QLT1/(RHT1*TLT1*TLT1+1.E-30)
      BETA=(1.+1.608d0*TLT1*DQSDT)/(1.+SLHE*DQSDT)
      CKM=(1.+SLHE*DQSDT)*(1.+.392d0*TLT1/SLHE)/
     *  (2.+(1.+1.608d0*TLT1/SLHE)*SLHE*DQSDT)
      DSEC=DWM*TLT1/BETA
C     DSEC=.53*SLHE*DWM
      DSEDIF=DSE-DSEC
      IF(DSEDIF.GT.1.E-3) FPLUME=FPLUME-DFX
      IF(DSEDIF.LT.-1.E-3) FPLUME=FPLUME+DFX
      IF(ABS(DSEDIF).LE.1.E-3.OR.FPLUME.GT.FPMAX) GO TO 380
  320 CONTINUE
C**** UPDATE TEMPERATURE, SPECIFIC HUMIDITY AND MOMENTUM DUE TO CTEI
  380 TH(L)=SMN1*BYAM(L)
      TL(L)=TH(L)*PLK(L)
      QL(L)=QMN1*BYAM(L)
      LHX=SVLHXL(L)
      RH(L)=QL(L)/QSAT(TL(L),LHX,PL(L))
      WMX(L)=WMN1*BYAM(L)
      TH(L+1)=SMN2*BYAM(L+1)
      QL(L+1)=QMN2*BYAM(L+1)
      WMX(L+1)=WMN2*BYAM(L+1)
      CALL CTMIX (SM,SXM,SYM,SZM,SXXM,SXYM,SYYM,SYZM,SZZM,SZXM,L,
     *     FMASS*AIRMR,FMIX,FRAT,LM)
      CALL CTMIX (QM,QXM,QYM,QZM,QXXM,QXYM,QYYM,QYZM,QZZM,QZXM,L,
     *     FMASS*AIRMR,FMIX,FRAT,LM)
      DO K=1,KMAX !vref
         UMN1(K)=(UMO1(K)*(1.-FMIX)+FRAT*UMO2(K)) !vref
         VMN1(K)=(VMO1(K)*(1.-FMIX)+FRAT*VMO2(K)) !vref
         UMN2(K)=(UMO2(K)*(1.-FRAT)+FMIX*UMO1(K)) !vref
         VMN2(K)=(VMO2(K)*(1.-FRAT)+FMIX*VMO1(K)) !vref
         UM(K,L)=UM(K,L)+(UMN1(K)-UMO1(K))*RA(K) !vref
         VM(K,L)=VM(K,L)+(VMN1(K)-VMO1(K))*RA(K) !vref
         UM(K,L+1)=UM(K,L+1)+(UMN2(K)-UMO2(K))*RA(K) !vref
         VM(K,L+1)=VM(K,L+1)+(VMN2(K)-VMO2(K))*RA(K) !vref
      ENDDO !vref
         QNEW=QL(L)
         QNEWU=QL(L+1)
C**** RE-EVAPORATION OF LWC IN THE UPPER LAYER
      QL(L+1)=QL(L+1)+WMX(L+1)
      TH(L+1)=TH(L+1)-(LHX*BYSHA)*WMX(L+1)/PLK(L+1)
      TL(L+1)=TH(L+1)*PLK(L+1)
      RH(L+1)=QL(L+1)/QSAT(TL(L+1),LHX,PL(L+1))
      WMX(L+1)=0.
      IF(RH(L).LE.1.) CAREA(L)=DSQRT((1.-RH(L))/(1.-RH00(L)+1.E-20))
      IF(CAREA(L).GT.1.) CAREA(L)=1.
      IF(RH(L).GT.1.) CAREA(L)=0.
      CLDSSL(L)=1.-CAREA(L)
      TNEW=TL(L)
      TNEWU=TL(L+1)
         HCNDSS=HCNDSS+(TNEW-TOLD)*AIRM(L)+(TNEWU-TOLDU)*AIRM(L+1)
         AJ11(L)=AJ11(L)+(TNEW-TOLD)*AIRM(L)
         AJ11(L+1)=AJ11(L+1)+(TNEWU-TOLDU)*AIRM(L+1)
         AJ55(L)=AJ55(L)+(QNEW-QOLD)*AIRM(L)*LHX*BYSHA
         AJ55(L+1)=AJ55(L+1)+(QNEWU-QOLDU)*AIRM(L+1)*LHX*BYSHA
  382 CONTINUE
         WMSUM=0.
C**** COMPUTE CLOUD PARTICLE SIZE AND OPTICAL THICKNESS
      DO 388 L=1,LM
      FCLD=CLDSSL(L)+1.E-20
      WTEM=1.d5*WMX(L)*PL(L)/(FCLD*TL(L)*RGAS+1.E-20)
      LHX=SVLHXL(L)
C     IF(LHX.EQ.LHE.AND.WMX(L)/FCLD.GE.WCONST*1.E-3)
C    *  WTEM=1.E5*WCONST*1.E-3*PL(L)/(TL(L)*RGAS)
      IF(LHX.EQ.LHS.AND.WMX(L)/FCLD.GE.WMUI*1.E-3)
     *  WTEM=1d5*WMUI*1.d-3*PL(L)/(TL(L)*RGAS)
      IF(WTEM.LT.1.E-10) WTEM=1.d-10
      IF(LHX.EQ.LHE) RCLD=(10.*(1.-PEARTH)+7.0*PEARTH)*
     *  (WTEM*4.)**BY3
      IF(LHX.EQ.LHE) THEN
         QHEATC=(QHEAT(L)+CAREA(L)*(EC(L)+ER(L)))/LHX
         IF(RCLD.GT.20..AND.PREP(L).GT.QHEATC) RCLD=20.
      ENDIF
      IF(LHX.EQ.LHS) RCLD=25.0*(WTEM/4.2d-3)**BY3
      RCLDE=RCLD/BYBR
      CSIZEL(L)=RCLDE
      TEM=AIRM(L)*WMX(L)*1.d2*BYGRAV
      TAUSSL(L)=1.5d3*TEM/(FCLD*RCLDE+1.E-20)
      IF(TAUSSL(L).GT.100.) TAUSSL(L)=100.
  388    IF(LHX.EQ.LHE) WMSUM=WMSUM+TEM
      PRCPSS=PREBAR(1)*GRAV*DTCNDS

C**** CALCULATE OPTICAL THICKNESS
      DO L=1,LM
      CLDSAVL(L)=CLDSSL(L)
      IF(TAUMCL(L).GT.0..AND.CKIJ.EQ.1.) GO TO 526
      BMAX=1.-EXP(-(CLDSAVL(L)/.3d0))
      IF(CLDSAVL(L).GE..95) BMAX=CLDSAVL(L)
      IF(L.EQ.1.OR.PLE(L+1).GT.930.) THEN
        CLDSSL(L)=CLDSSL(L)+
     *               (BMAX-CLDSSL(L))*CKIJ
        TAUSSL(L)=TAUSSL(L)*CLDSAVL(L)/
     *               (CLDSSL(L)+1.E-20)
      ENDIF
      IF(TAUSSL(L).LE.0.) CLDSSL(L)=0.
      IF(L.EQ.1.OR.PLE(L+1).GT.930..OR.TAUMCL(L).GT.0.) GO TO 526
      CLDSSL(L)=CLDSSL(L)**(2.*BY3)
      TAUSSL(L)=TAUSSL(L)*CLDSAVL(L)**BY3
  526 CONTINUE
      IF(WMX(L).LE.0.) SVLHXL(L)=0.
      END DO

      RETURN
      END SUBROUTINE LSCOND
C****
      SUBROUTINE CTMIX (RM,RX,RY,RZ,RXX,RXY,RYY,RYZ,RZZ,RZX,L,FMAIR,
     *     FMIX,FRAT,LM)
!@sum CTMIX  Cloud top mixing of tracer moments (incl. q,t) from CONDSE
!@auth Jean Lerner
!@ver 1.0
!@var RM,RX,RY,RZ,RXX,RYY,RZZ,RXY,RYZ,RZX mean and moments of tracer
      IMPLICIT NONE
      REAL*8, DIMENSION(LM) ::  RM,RX,RY,RZ,RXX,RYY,RZZ,RXY,RYZ,RZX
      REAL*8 FMIX      !@var FMIX  fraction of lower box mixed up
      REAL*8 FRAT      !@var FRAT  fraction of upper box mixed down
      REAL*8 FMAIR     !@var FMAIR mass of air mixed
      REAL*8 RTEMP     !@var RTEMP dummy variable
      INTEGER L        !@var L   level of mixing
      INTEGER LM       !@var LM  max level

      RTEMP   = RM(L  )*(1.-FMIX)+FRAT*RM(L+1)
      RM(L+1) = RM(L+1)*(1.-FRAT)+FMIX*RM(L  )
      RM(L  ) = RTEMP
C X
      RTEMP   = RX(L  )*(1.-FMIX)+FRAT*RX(L+1)
      RX(L+1) = RX(L+1)*(1.-FRAT)+FMIX*RX(L  )
      RX(L  ) = RTEMP
C Y
      RTEMP   = RY(L  )*(1.-FMIX)+FRAT*RY(L+1)
      RY(L+1) = RY(L+1)*(1.-FRAT)+FMIX*RY(L  )
      RY(L  ) = RTEMP
C Z
      RZ(L  ) = RZ(L  )*(1.-FMAIR)
      RZ(L+1) = RZ(L+1)*(1.-FMAIR)
C XX
      RTEMP    = RXX(L  )*(1.-FMIX)+FRAT*RXX(L+1)
      RXX(L+1) = RXX(L+1)*(1.-FRAT)+FMIX*RXX(L  )
      RXX(L  ) = RTEMP
C YY
      RTEMP    = RYY(L  )*(1.-FMIX)+FRAT*RYY(L+1)
      RYY(L+1) = RYY(L+1)*(1.-FRAT)+FMIX*RYY(L  )
      RYY(L  ) = RTEMP
C XY
      RTEMP    = RXY(L  )*(1.-FMIX)+FRAT*RXY(L+1)
      RXY(L+1) = RXY(L+1)*(1.-FRAT)+FMIX*RXY(L  )
      RXY(L  ) = RTEMP
C ZZ
      RZZ(L  ) = RZZ(L  )*(1.-FMAIR)
      RZZ(L+1) = RZZ(L+1)*(1.-FMAIR)
C ZX
      RZX(L  ) = RZX(L  )*(1.-FMAIR)
      RZX(L+1) = RZX(L+1)*(1.-FMAIR)
C ZZ
      RYZ(L  ) = RYZ(L  )*(1.-FMAIR)
      RYZ(L+1) = RYZ(L+1)*(1.-FMAIR)
      RETURN
      END SUBROUTINE CTMIX

C**** This function to be replaced by standard version in UTILDBL
      FUNCTION QSAT (TM,QL,PR)
!@sum   QSAT calculates saturation vapour mixing ratio
!@auth  Original development team
!@ver   1.0 (CLOUDS ONLY)
      USE CONSTANT, only : RGAS
      IMPLICIT NONE
      REAL*8, INTENT(IN) :: TM  !@var TM   potential temperature (K)
      REAL*8, INTENT(IN) :: QL  !@var QL   lat. heat of vap. (J/kg)
      REAL*8, INTENT(IN) :: PR  !@var PR   air pressure (mb)
      REAL*8 :: QSAT            !@var QSAT sat. vapour mixing ratio
      QSAT = .622d0*EXP(AXCONS+QL*BXCONS*(BYTF-1./TM))/PR
      RETURN
      END FUNCTION QSAT

      END MODULE CLD01
